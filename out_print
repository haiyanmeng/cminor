==1091== Memcheck, a memory error detector
==1091== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1091== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1091== Command: ./cminor -print good1.cminor
==1091== 
func_test: function integer ();
str_create: function string ( str: string ) =
{
    print "parameter str: ",str,'\n';
    return "new string lol";
}
main: function integer () =
{
    str: string = "hello333";
    print "return value: ",str_create(str),'\n';
    print str_create(str_create(str_create(str_create(str_create(str_create(str_create(str_create(str_create(str_create(str_create(str)))))))))));
    return 0;
}
==1091== 
==1091== HEAP SUMMARY:
==1091==     in use at exit: 26,173 bytes in 91 blocks
==1091==   total heap usage: 97 allocs, 6 frees, 26,203 bytes allocated
==1091== 
==1091== LEAK SUMMARY:
==1091==    definitely lost: 0 bytes in 0 blocks
==1091==    indirectly lost: 0 bytes in 0 blocks
==1091==      possibly lost: 0 bytes in 0 blocks
==1091==    still reachable: 26,173 bytes in 91 blocks
==1091==         suppressed: 0 bytes in 0 blocks
==1091== Reachable blocks (those to which a pointer was found) are not shown.
==1091== To see them, rerun with: --leak-check=full --show-reachable=yes
==1091== 
==1091== For counts of detected and suppressed errors, rerun with: -v
==1091== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1092== Memcheck, a memory error detector
==1092== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1092== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1092== Command: ./cminor -print good2.cminor
==1092== 
main: function integer ( param1: integer, param2: char, param3: string, param4: boolean ) =
{
    x: integer = ((((((((((5-3)+0)+2)-2)+2)-2)+(2%1))+(2/20))+(0*34343))^(20-10));
    y: integer = 2048;
    z: integer = ((x+x)+((x*2)/10000));
    print x,'\n';
    print y,'\n';
    print z,'\n';
    b1: boolean = (y==z);
    b2: boolean = (x==y);
    s1: string = "hello";
    s2: string = "worl";
    b3: boolean;
    b4: boolean;
    (b3=(s1==s2));
    (b4=(s1!=s2));
    print b1,'\n';
    print b2,'\n';
    print b3,'\n';
    print b4,'\n';
    print ((100-20)-3),'\n';
    return 0;
}
==1092== 
==1092== HEAP SUMMARY:
==1092==     in use at exit: 31,212 bytes in 186 blocks
==1092==   total heap usage: 206 allocs, 20 frees, 31,312 bytes allocated
==1092== 
==1092== LEAK SUMMARY:
==1092==    definitely lost: 0 bytes in 0 blocks
==1092==    indirectly lost: 0 bytes in 0 blocks
==1092==      possibly lost: 0 bytes in 0 blocks
==1092==    still reachable: 31,212 bytes in 186 blocks
==1092==         suppressed: 0 bytes in 0 blocks
==1092== Reachable blocks (those to which a pointer was found) are not shown.
==1092== To see them, rerun with: --leak-check=full --show-reachable=yes
==1092== 
==1092== For counts of detected and suppressed errors, rerun with: -v
==1092== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1093== Memcheck, a memory error detector
==1093== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1093== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1093== Command: ./cminor -print good3.cminor
==1093== 
x1: integer = (2^((10-8)+(0/1)));
x2: string = "heeo\0dfdf\n";
x3: boolean = (((true&&(1<3))&&(1>5))||false);
x4: boolean = ("hello"=="hello");
x5: boolean = ("hello"!="word");
x6: char = 'u';
x: boolean;
y: integer;
z: string;
c: char;
main: function integer () =
{
    print x1,'\n';
    print x2,'\n';
    print x3,'\n';
    print x4,'\n';
    print x5,'\n';
    print x6,'\n';
    print '\n';
    print x,'\n';
    print y,'\n';
    print z,'\n';
    print c,'\n';
    print '\n';
    x1: integer = (x1+10);
    x2: string = "local string";
    x3: boolean = (x3||true);
    x4: boolean = (x4&&true);
    x: char = '-';
    y: string = "local y is string";
    z: integer = (1024/100);
    c: boolean = (x3||x4);
    print x1,'\n';
    print x2,'\n';
    print x3,'\n';
    print x4,'\n';
    print '\n';
    print x,'\n';
    print y,'\n';
    print z,'\n';
    print c,'\n';
    return 0;
}
==1093== 
==1093== HEAP SUMMARY:
==1093==     in use at exit: 33,916 bytes in 252 blocks
==1093==   total heap usage: 282 allocs, 30 frees, 34,066 bytes allocated
==1093== 
==1093== LEAK SUMMARY:
==1093==    definitely lost: 0 bytes in 0 blocks
==1093==    indirectly lost: 0 bytes in 0 blocks
==1093==      possibly lost: 0 bytes in 0 blocks
==1093==    still reachable: 33,916 bytes in 252 blocks
==1093==         suppressed: 0 bytes in 0 blocks
==1093== Reachable blocks (those to which a pointer was found) are not shown.
==1093== To see them, rerun with: --leak-check=full --show-reachable=yes
==1093== 
==1093== For counts of detected and suppressed errors, rerun with: -v
==1093== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1095== Memcheck, a memory error detector
==1095== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1095== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1095== Command: ./cminor -print good4.cminor
==1095== 
f1: function integer () =
{
    print "func return type: void\n";
    return 0;
}
f2: function integer () =
{
    print "func return type: integer\n";
}
f3: function char () =
{
    print "func return type: char\n";
}
f4: function string () =
{
    print "func return type: string\n";
    return "hello world";
}
f5: function boolean () =
{
    print "func return type: boolean\n";
}
main: function integer ( param1: integer, param2: char, param3: string, param4: boolean ) =
{
    print "test return type\n";
    print f2(),'\n';
    print f3(),'\n';
    print f5(),'\n';
    print f4(),'\n';
    return 0;
}
==1095== 
==1095== HEAP SUMMARY:
==1095==     in use at exit: 26,588 bytes in 101 blocks
==1095==   total heap usage: 114 allocs, 13 frees, 26,653 bytes allocated
==1095== 
==1095== LEAK SUMMARY:
==1095==    definitely lost: 0 bytes in 0 blocks
==1095==    indirectly lost: 0 bytes in 0 blocks
==1095==      possibly lost: 0 bytes in 0 blocks
==1095==    still reachable: 26,588 bytes in 101 blocks
==1095==         suppressed: 0 bytes in 0 blocks
==1095== Reachable blocks (those to which a pointer was found) are not shown.
==1095== To see them, rerun with: --leak-check=full --show-reachable=yes
==1095== 
==1095== For counts of detected and suppressed errors, rerun with: -v
==1095== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1096== Memcheck, a memory error detector
==1096== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1096== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1096== Command: ./cminor -print good5.cminor
==1096== 
main: function integer () =
{
    x1: integer;
    x2: integer;
    x3: integer;
    x4: integer;
    x5: integer;
    x6: integer;
    x7: integer;
    x8: integer;
    x9: integer;
    (x1=(x2=(x3=(x4=(x5=(x6=(x7=(x8=(x9=23456)))))))));
    print x1,'\n';
    print x2,'\n';
    print x3,'\n';
    print x4,'\n';
    print x5,'\n';
    print x6,'\n';
    print x7,'\n';
    print x8,'\n';
    print x9,'\n';
    return 0;
}
==1096== 
==1096== HEAP SUMMARY:
==1096==     in use at exit: 28,053 bytes in 132 blocks
==1096==   total heap usage: 152 allocs, 20 frees, 28,153 bytes allocated
==1096== 
==1096== LEAK SUMMARY:
==1096==    definitely lost: 0 bytes in 0 blocks
==1096==    indirectly lost: 0 bytes in 0 blocks
==1096==      possibly lost: 0 bytes in 0 blocks
==1096==    still reachable: 28,053 bytes in 132 blocks
==1096==         suppressed: 0 bytes in 0 blocks
==1096== Reachable blocks (those to which a pointer was found) are not shown.
==1096== To see them, rerun with: --leak-check=full --show-reachable=yes
==1096== 
==1096== For counts of detected and suppressed errors, rerun with: -v
==1096== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1097== Memcheck, a memory error detector
==1097== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1097== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1097== Command: ./cminor -print good6.cminor
==1097== 
main: function integer () =
{
    x1: integer = 2;
    x2: integer = 2;
    x3: integer = 2;
    x4: integer = 2;
    x5: integer = 2;
    x6: integer = 2;
    x7: integer = 2;
    x8: integer = 2;
    x9: integer = 2;
    x10: integer = ((((((((x1+x2)+x3)+x4)+x5)+x6)+x7)+x8)+x9);
    print x1,'\n';
    print x2,'\n';
    print x3,'\n';
    print x4,'\n';
    print x5,'\n';
    print x6,'\n';
    print x7,'\n';
    print x8,'\n';
    print x9,'\n';
    print x10,'\n';
    return 0;
}
==1097== 
==1097== HEAP SUMMARY:
==1097==     in use at exit: 28,954 bytes in 148 blocks
==1097==   total heap usage: 169 allocs, 21 frees, 29,059 bytes allocated
==1097== 
==1097== LEAK SUMMARY:
==1097==    definitely lost: 0 bytes in 0 blocks
==1097==    indirectly lost: 0 bytes in 0 blocks
==1097==      possibly lost: 0 bytes in 0 blocks
==1097==    still reachable: 28,954 bytes in 148 blocks
==1097==         suppressed: 0 bytes in 0 blocks
==1097== Reachable blocks (those to which a pointer was found) are not shown.
==1097== To see them, rerun with: --leak-check=full --show-reachable=yes
==1097== 
==1097== For counts of detected and suppressed errors, rerun with: -v
==1097== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1098== Memcheck, a memory error detector
==1098== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1098== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1098== Command: ./cminor -print good7.cminor
==1098== 
func1: function integer ( a: integer, b: char, c: char, d: char, e: char, f: char, g: char, h: char );
main: function integer () =
{
    print "main func\n";
    return 0;
}
==1098== 
==1098== HEAP SUMMARY:
==1098==     in use at exit: 23,339 bytes in 44 blocks
==1098==   total heap usage: 46 allocs, 2 frees, 23,349 bytes allocated
==1098== 
==1098== LEAK SUMMARY:
==1098==    definitely lost: 0 bytes in 0 blocks
==1098==    indirectly lost: 0 bytes in 0 blocks
==1098==      possibly lost: 0 bytes in 0 blocks
==1098==    still reachable: 23,339 bytes in 44 blocks
==1098==         suppressed: 0 bytes in 0 blocks
==1098== Reachable blocks (those to which a pointer was found) are not shown.
==1098== To see them, rerun with: --leak-check=full --show-reachable=yes
==1098== 
==1098== For counts of detected and suppressed errors, rerun with: -v
==1098== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1099== Memcheck, a memory error detector
==1099== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1099== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1099== Command: ./cminor -print good8.cminor
==1099== 
f: function integer ( x: integer, y: integer, z: integer ) =
{
    return ((x+y)+z);
}
main: function integer () =
{
    x: integer = 1;
    y: integer = 2;
    z: integer = 3;
    c: integer = 2;
    b: integer = 5;
    a: integer = 80;
    d: integer = 400;
    e: boolean = true;
    f1: boolean = false;
    g: boolean;
    (g=(f1||(e&&(d==(a+(b*c))))));
    print g,'\n';
    (g=(f1||(e&&(d==(a+(b*(c^f(x,y,z))))))));
    print g,'\n';
    return 0;
}
==1099== 
==1099== HEAP SUMMARY:
==1099==     in use at exit: 28,846 bytes in 151 blocks
==1099==   total heap usage: 167 allocs, 16 frees, 28,926 bytes allocated
==1099== 
==1099== LEAK SUMMARY:
==1099==    definitely lost: 0 bytes in 0 blocks
==1099==    indirectly lost: 0 bytes in 0 blocks
==1099==      possibly lost: 0 bytes in 0 blocks
==1099==    still reachable: 28,846 bytes in 151 blocks
==1099==         suppressed: 0 bytes in 0 blocks
==1099== Reachable blocks (those to which a pointer was found) are not shown.
==1099== To see them, rerun with: --leak-check=full --show-reachable=yes
==1099== 
==1099== For counts of detected and suppressed errors, rerun with: -v
==1099== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1100== Memcheck, a memory error detector
==1100== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1100== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1100== Command: ./cminor -print good9.cminor
==1100== 
main: function integer () =
{
    i: integer;
    s: integer = 0;
    for((i=1);(((i<5)&&(i>0))&&(s<20));(i++)) {
        (s=(s+i));
    }
    print s,'\n';
    (s=0);
    for((i=1);((i==1)&&(i<5));(i++)) {
        (s=(s+i));
    }
    print s,'\n';
    return 0;
}
==1100== 
==1100== HEAP SUMMARY:
==1100==     in use at exit: 26,873 bytes in 98 blocks
==1100==   total heap usage: 110 allocs, 12 frees, 26,941 bytes allocated
==1100== 
==1100== LEAK SUMMARY:
==1100==    definitely lost: 0 bytes in 0 blocks
==1100==    indirectly lost: 0 bytes in 0 blocks
==1100==      possibly lost: 0 bytes in 0 blocks
==1100==    still reachable: 26,873 bytes in 98 blocks
==1100==         suppressed: 0 bytes in 0 blocks
==1100== Reachable blocks (those to which a pointer was found) are not shown.
==1100== To see them, rerun with: --leak-check=full --show-reachable=yes
==1100== 
==1100== For counts of detected and suppressed errors, rerun with: -v
==1100== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1102== Memcheck, a memory error detector
==1102== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1102== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1102== Command: ./cminor -print good10.cminor
==1102== 
main: function integer () =
{
    print 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20;
    print '\n';
    return 0;
}
==1102== 
==1102== HEAP SUMMARY:
==1102==     in use at exit: 25,412 bytes in 56 blocks
==1102==   total heap usage: 59 allocs, 3 frees, 25,427 bytes allocated
==1102== 
==1102== LEAK SUMMARY:
==1102==    definitely lost: 0 bytes in 0 blocks
==1102==    indirectly lost: 0 bytes in 0 blocks
==1102==      possibly lost: 0 bytes in 0 blocks
==1102==    still reachable: 25,412 bytes in 56 blocks
==1102==         suppressed: 0 bytes in 0 blocks
==1102== Reachable blocks (those to which a pointer was found) are not shown.
==1102== To see them, rerun with: --leak-check=full --show-reachable=yes
==1102== 
==1102== For counts of detected and suppressed errors, rerun with: -v
==1102== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1103== Memcheck, a memory error detector
==1103== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1103== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1103== Command: ./cminor -print good11.cminor
==1103== 
main: function integer () =
{
    if((2<3)) {
        print "2<3\n";
    } else {
        print "never happen\n";
    }
    if(false)
        print "never enter\n";
    else
        print "always false\n";
    if(((!(!(!false)))&&(3>1)))
        print "!!!false\n";
    return 0;
}
==1103== 
==1103== HEAP SUMMARY:
==1103==     in use at exit: 24,398 bytes in 45 blocks
==1103==   total heap usage: 57 allocs, 12 frees, 24,478 bytes allocated
==1103== 
==1103== LEAK SUMMARY:
==1103==    definitely lost: 0 bytes in 0 blocks
==1103==    indirectly lost: 0 bytes in 0 blocks
==1103==      possibly lost: 0 bytes in 0 blocks
==1103==    still reachable: 24,398 bytes in 45 blocks
==1103==         suppressed: 0 bytes in 0 blocks
==1103== Reachable blocks (those to which a pointer was found) are not shown.
==1103== To see them, rerun with: --leak-check=full --show-reachable=yes
==1103== 
==1103== For counts of detected and suppressed errors, rerun with: -v
==1103== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1104== Memcheck, a memory error detector
==1104== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1104== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1104== Command: ./cminor -print good12.cminor
==1104== 
f: function integer () =
{
    print "f - a\n";
    print "f - b\n";
    return 0;
    print "f - c\n";
    return 0;
}
main: function integer () =
{
    print "main function\n";
    if((f()==0)) {
        print "f() return 0\n";
        return 0;
    } 
    print "f() ends\n";
    return 0;
    f();
    print "f() ends second time\n";
    return 0;
}
==1104== 
==1104== HEAP SUMMARY:
==1104==     in use at exit: 24,932 bytes in 58 blocks
==1104==   total heap usage: 73 allocs, 15 frees, 25,015 bytes allocated
==1104== 
==1104== LEAK SUMMARY:
==1104==    definitely lost: 0 bytes in 0 blocks
==1104==    indirectly lost: 0 bytes in 0 blocks
==1104==      possibly lost: 0 bytes in 0 blocks
==1104==    still reachable: 24,932 bytes in 58 blocks
==1104==         suppressed: 0 bytes in 0 blocks
==1104== Reachable blocks (those to which a pointer was found) are not shown.
==1104== To see them, rerun with: --leak-check=full --show-reachable=yes
==1104== 
==1104== For counts of detected and suppressed errors, rerun with: -v
==1104== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1105== Memcheck, a memory error detector
==1105== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1105== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1105== Command: ./cminor -print good13.cminor
==1105== 
x52: integer = 1;
x: integer = 2;
f52: function void ( x: integer ) =
{
    print x,'\n';
    {
        x: integer = 4;
    }
    print x,'\n';
    if((x52==1)) {
        x: integer = 5;
        print x,'\n';
    } 
    {
        x: integer;
        {
            {
                (x=6);
            }
        }
        {
            {
                {
                    print x,'\n';
                }
            }
        }
    }
    print x,'\n';
}
main: function integer () =
{
    print x,'\n';
    x: integer = 3;
    f52(x);
    return 0;
}
==1105== 
==1105== HEAP SUMMARY:
==1105==     in use at exit: 27,137 bytes in 108 blocks
==1105==   total heap usage: 137 allocs, 29 frees, 27,398 bytes allocated
==1105== 
==1105== LEAK SUMMARY:
==1105==    definitely lost: 0 bytes in 0 blocks
==1105==    indirectly lost: 0 bytes in 0 blocks
==1105==      possibly lost: 0 bytes in 0 blocks
==1105==    still reachable: 27,137 bytes in 108 blocks
==1105==         suppressed: 0 bytes in 0 blocks
==1105== Reachable blocks (those to which a pointer was found) are not shown.
==1105== To see them, rerun with: --leak-check=full --show-reachable=yes
==1105== 
==1105== For counts of detected and suppressed errors, rerun with: -v
==1105== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1106== Memcheck, a memory error detector
==1106== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1106== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1106== Command: ./cminor -print good14.cminor
==1106== 
main: function integer () =
{
    print "2^4";
    print '=';
    print (2^4);
    print '\n';
    print "2^0=",(2^0);
    print '\n';
    print "2^(-10)=";
    print (2^(-10));
    print '\n';
    print "(5-3+0+2-2+2-2+2%1+2/20+0*34343)^(20-10)=";
    print ((((((((((5-3)+0)+2)-2)+2)-2)+(2%1))+(2/20))+(0*34343))^(20-10));
    print '\n';
    print "2+4";
    print '\n';
    print (2+4);
    print '\n';
    print "2-4";
    print '\n';
    print (2-4);
    print '\n';
    print "2*4";
    print '\n';
    print (2*4);
    print '\n';
    print "29/4";
    print '\n';
    print (29/4);
    print '\n';
    print "29%4";
    print '\n';
    print (29%4);
    print '\n';
    return 0;
}
==1106== 
==1106== HEAP SUMMARY:
==1106==     in use at exit: 30,549 bytes in 148 blocks
==1106==   total heap usage: 181 allocs, 33 frees, 30,714 bytes allocated
==1106== 
==1106== LEAK SUMMARY:
==1106==    definitely lost: 0 bytes in 0 blocks
==1106==    indirectly lost: 0 bytes in 0 blocks
==1106==      possibly lost: 0 bytes in 0 blocks
==1106==    still reachable: 30,549 bytes in 148 blocks
==1106==         suppressed: 0 bytes in 0 blocks
==1106== Reachable blocks (those to which a pointer was found) are not shown.
==1106== To see them, rerun with: --leak-check=full --show-reachable=yes
==1106== 
==1106== For counts of detected and suppressed errors, rerun with: -v
==1106== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1107== Memcheck, a memory error detector
==1107== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1107== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1107== Command: ./cminor -print good15.cminor
==1107== 
main: function integer () =
{
    print "true && true";
    print '\n';
    print (true&&true);
    print '\n';
    print "false && false";
    print '\n';
    print (false&&false);
    print '\n';
    print "true && false";
    print '\n';
    print (true&&false);
    print '\n';
    print "true || true";
    print '\n';
    print (true||true);
    print '\n';
    print "false || false";
    print '\n';
    print (false||false);
    print '\n';
    print "true || false";
    print '\n';
    print (true||false);
    print '\n';
    return 0;
}
==1107== 
==1107== HEAP SUMMARY:
==1107==     in use at exit: 26,859 bytes in 91 blocks
==1107==   total heap usage: 116 allocs, 25 frees, 26,984 bytes allocated
==1107== 
==1107== LEAK SUMMARY:
==1107==    definitely lost: 0 bytes in 0 blocks
==1107==    indirectly lost: 0 bytes in 0 blocks
==1107==      possibly lost: 0 bytes in 0 blocks
==1107==    still reachable: 26,859 bytes in 91 blocks
==1107==         suppressed: 0 bytes in 0 blocks
==1107== Reachable blocks (those to which a pointer was found) are not shown.
==1107== To see them, rerun with: --leak-check=full --show-reachable=yes
==1107== 
==1107== For counts of detected and suppressed errors, rerun with: -v
==1107== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1110== Memcheck, a memory error detector
==1110== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1110== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1110== Command: ./cminor -print good16.cminor
==1110== 
main: function integer () =
{
    print "1 <= 2";
    print '\n';
    print (1<=2);
    print '\n';
    print "12345 <= 2";
    print '\n';
    print (12345<=2);
    print '\n';
    print " 500 +9 < 234";
    print '\n';
    print ((500+9)<234);
    print '\n';
    print " 5 +9 < 234";
    print '\n';
    print ((5+9)<234);
    print '\n';
    print "1 < 2";
    print '\n';
    print (1<2);
    print '\n';
    print "1 >= 2";
    print '\n';
    print (1>=2);
    print '\n';
    print "12345 >= 2";
    print '\n';
    print (12345>=2);
    print '\n';
    print " 500 +9 > 234";
    print '\n';
    print ((500+9)>234);
    print '\n';
    print " 5 +9 > 234";
    print '\n';
    print ((5+9)>234);
    print '\n';
    print "1 > 2";
    print '\n';
    print (1>2);
    print '\n';
    return 0;
}
==1110== 
==1110== HEAP SUMMARY:
==1110==     in use at exit: 30,379 bytes in 151 blocks
==1110==   total heap usage: 192 allocs, 41 frees, 30,584 bytes allocated
==1110== 
==1110== LEAK SUMMARY:
==1110==    definitely lost: 0 bytes in 0 blocks
==1110==    indirectly lost: 0 bytes in 0 blocks
==1110==      possibly lost: 0 bytes in 0 blocks
==1110==    still reachable: 30,379 bytes in 151 blocks
==1110==         suppressed: 0 bytes in 0 blocks
==1110== Reachable blocks (those to which a pointer was found) are not shown.
==1110== To see them, rerun with: --leak-check=full --show-reachable=yes
==1110== 
==1110== For counts of detected and suppressed errors, rerun with: -v
==1110== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1112== Memcheck, a memory error detector
==1112== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1112== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1112== Command: ./cminor -print good17.cminor
==1112== 
print_func: function integer ( x: integer, y: char, z: boolean, t: string ) =
{
    print x;
    print '\n';
    print y;
    print '\n';
    print z;
    print '\n';
    print t;
    print '\n';
    return 0;
}
main: function integer () =
{
    print "true == false";
    print '\n';
    print (true==false);
    print '\n';
    print "true == true";
    print '\n';
    print (true==true);
    print '\n';
    print "3 == 5";
    print '\n';
    print (3==5);
    print '\n';
    print "(2+1+0/234) == (5/4+2*1)";
    print '\n';
    print (((2+1)+(0/234))==((5/4)+(2*1)));
    print '\n';
    print "hello"," == ","word";
    print '\n';
    print ("hello"=="word");
    print '\n';
    print "hello"," != ","word";
    print '\n';
    print ("hello"!="word");
    print '\n';
    print "hello111"," == ","hello111";
    print '\n';
    print ("hello111"=="hello111");
    print '\n';
    print "'c' == 'd'";
    print '\n';
    print ('c'=='d');
    print '\n';
    print "3!=5";
    print '\n';
    print (3!=5);
    print '\n';
    print "'c' != 'd'";
    print '\n';
    print ('c'!='d');
    print '\n';
    print "true != false";
    print '\n';
    print (true!=false);
    print '\n';
    print "false != false";
    print '\n';
    print (false!=false);
    print '\n';
    x: integer = 4;
    print (x--),' ',x,'\n';
    print_func(222,'~',true,"hello haiyan meng");
    return 0;
}
==1112== 
==1112== HEAP SUMMARY:
==1112==     in use at exit: 36,674 bytes in 283 blocks
==1112==   total heap usage: 344 allocs, 61 frees, 36,979 bytes allocated
==1112== 
==1112== LEAK SUMMARY:
==1112==    definitely lost: 0 bytes in 0 blocks
==1112==    indirectly lost: 0 bytes in 0 blocks
==1112==      possibly lost: 0 bytes in 0 blocks
==1112==    still reachable: 36,674 bytes in 283 blocks
==1112==         suppressed: 0 bytes in 0 blocks
==1112== Reachable blocks (those to which a pointer was found) are not shown.
==1112== To see them, rerun with: --leak-check=full --show-reachable=yes
==1112== 
==1112== For counts of detected and suppressed errors, rerun with: -v
==1112== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1113== Memcheck, a memory error detector
==1113== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1113== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1113== Command: ./cminor -print good18.cminor
==1113== 
global_x: integer = (888+112);
global_x1: integer = (888-388);
global_x2: integer = (3*5);
global_x3: integer = (21/2);
global_x4: integer = (20%7);
global_x5: integer = (2^8);
global_x6: integer = ((((1+(2*3))-((5*2)/4))+(2^3))-(17%3));
global_y: char = 'o';
global_z: string = "i am global";
global_t1: boolean = (true&&true);
global_t2: boolean = false;
global_global_uninit_int: integer;
global_global_uninit_char: char;
global_global_uninit_str: string;
global_global_uninit_boolean: boolean;
func: function integer ( a: integer, b: char, c: char, d: integer, e: integer ) =
{
    local0: integer;
    local1: integer;
    local2: integer;
    local3: integer;
    (((a+global_x)+d)+e);
    (a+global_x);
    (a+e);
    return (a+1);
}
f: function void () =
{
    35;
    '\\';
    '\0';
    '\r';
    '\n';
    '\t';
    '5';
    "\h\t\n\0\\ello\0haiyan";
    "hello\t\\\n\0world";
    "haiyan\tmeng\\gezi\npeng\0end";
    "\h\t\n\\ello\0";
    true;
    false;
}
print_func: function void ( x: integer, y: char, z: boolean, t: string ) =
{
    print x;
    print '\n';
    print y;
    print '\n';
    print z;
    print '\n';
    print t;
    print '\n';
    return;
}
sum: function integer ( x: integer, y: integer ) =
{
    return (x+y);
}
incr: function integer ( x: integer ) =
{
    return (x+1);
}
main: function integer ( param1: integer, param2: char, param3: string, param4: boolean ) =
{
    print "2^4";
    print '\n';
    print (2^4);
    print '\n';
    print (2^0);
    print '\n';
    print (2^(-10));
    print '\n';
    print ((((((((((5-3)+0)+2)-2)+2)-2)+(2%1))+(2/20))+(0*34343))^(20-10));
    print '\n';
    if((2<3)) {
        print "2<3\n";
    } else {
        print "never happen\n";
    }
    print "2+4";
    print '\n';
    print (2+4);
    print '\n';
    print "2-4";
    print '\n';
    print (2-4);
    print '\n';
    print "2*4";
    print '\n';
    print (2*4);
    print '\n';
    print "29/4";
    print '\n';
    print (29/4);
    print '\n';
    print "29%4";
    print '\n';
    print (29%4);
    print '\n';
    print "true && true";
    print '\n';
    print (true&&true);
    print '\n';
    print "false && false";
    print '\n';
    print (false&&false);
    print '\n';
    print "true && false";
    print '\n';
    print (true&&false);
    print '\n';
    print "true || true";
    print '\n';
    print (true||true);
    print '\n';
    print "false || false";
    print '\n';
    print (false||false);
    print '\n';
    print "true || false";
    print '\n';
    print (true||false);
    print '\n';
    print "1 <= 2";
    print '\n';
    print (1<=2);
    print '\n';
    print "12345 <= 2";
    print '\n';
    print (12345<=2);
    print '\n';
    print " 500 +9 < 234";
    print '\n';
    print ((500+9)<234);
    print '\n';
    print " 5 +9 < 234";
    print '\n';
    print ((5+9)<234);
    print '\n';
    print "1 < 2";
    print '\n';
    print (1<2);
    print '\n';
    print "1 >= 2";
    print '\n';
    print (1>=2);
    print '\n';
    print "12345 >= 2";
    print '\n';
    print (12345>=2);
    print '\n';
    print " 500 +9 > 234";
    print '\n';
    print ((500+9)>234);
    print '\n';
    print " 5 +9 > 234";
    print '\n';
    print ((5+9)>234);
    print '\n';
    print "1 > 2";
    print '\n';
    print (1>2);
    print '\n';
    print "true == false";
    print '\n';
    print (true==false);
    print '\n';
    print "true == true";
    print '\n';
    print (true==true);
    print '\n';
    print "3 == 5";
    print '\n';
    print (3==5);
    print '\n';
    print "(2+1+0/234) == (5/4+2*1)";
    print '\n';
    print (((2+1)+(0/234))==((5/4)+(2*1)));
    print '\n';
    print "hello"," == ","word";
    print '\n';
    print ("hello"=="word");
    print '\n';
    print "hello"," != ","word";
    print '\n';
    print ("hello"!="word");
    print '\n';
    print "hello111"," == ","hello111";
    print '\n';
    print ("hello111"=="hello111");
    print '\n';
    print "'c' == 'd'";
    print '\n';
    print ('c'=='d');
    print '\n';
    print "3!=5";
    print '\n';
    print (3!=5);
    print '\n';
    print "'c' != 'd'";
    print '\n';
    print ('c'!='d');
    print '\n';
    print "true != false";
    print '\n';
    print (true!=false);
    print '\n';
    print "false != false";
    print '\n';
    print (false!=false);
    print '\n';
    print (1+23),"hello",'u',true,false;
    print 1;
    print '\n';
    print "hello";
    print '\n';
    print 'u';
    print '\n';
    print true;
    print '\n';
    print false;
    print '\n';
    print "sum(3+20)";
    print '\n';
    print sum(3,20);
    print '\n';
    print "!(3<20)";
    print '\n';
    print (!(3<20));
    print '\n';
    print "-(30-5)";
    print '\n';
    print (-(30-5));
    print '\n';
    x: integer = 2;
    x1: integer = 3;
    x2: integer = 4;
    x3: integer = 5;
    print x,' ',x1,' ',x2,' ',x3;
    print '\n';
    print (x+12);
    print '\n';
    print "x=2\n";
    print "x++ = ",(x++),", x= ",x,'\n';
    print "x++ = ",(x++),", x= ",x,'\n';
    print "x3=5\n";
    print "x3-- = ",(x3--),", x3= ",x3,'\n';
    print "x3-- = ",(x3--),", x3= ",x3,'\n';
    y: integer = (x++);
    print y,'\n';
    print x,'\n';
    (y=(-(-(-x))));
    print y,'\n';
    print x,'\n';
    print (y>x),' ',(!(y>x)),' ',(!(!(y>x))),' ',(!(!(!(y>x)))),'\n';
    if((!(y>x)))
        print "y<=x\n";
    else
        print "y>x\n";
    if(((!(y>x))||(!false)))
        print "y<=x || true\n";
    (x=(x1=(x3=x2)));
    print x," ",x1,' ';
    print x2,' ',x3,'\n';
    print_func(222,'~',true,"hello haiyan meng");
    print_func(222,'~',true,"hello haiyan meng");
    (x=8);
    print "x=8\n";
    print (x--),' ',x,'\n';
    (x=4);
    print "x=4\n";
    print (x++),' ',x,'\n';
    (x=3);
    print ((1+2)*3);
    print '\n';
    (param1=23);
    (param2='p');
    (param3="i am param3");
    (param4=(true&&false));
    print param1,' ',param2,' ';
    print param4,' ',param3,'\n';
    print_func(param1,param2,param4,param3);
    print global_x,' ';
    print global_x1,' ';
    print global_x2,' ';
    print global_x3,' ';
    print global_x4,' ';
    print global_x5,' ';
    print global_x6,' ';
    print global_y,' ';
    print global_z,' ';
    print global_t1,' ';
    print global_t2,' ';
    print global_global_uninit_int,' ';
    print global_global_uninit_char,' ';
    print global_global_uninit_str,' ';
    print global_global_uninit_boolean,' ';
    print '\n';
    (global_global_uninit_int=432);
    (global_global_uninit_char='i');
    (global_global_uninit_str="new string");
    (global_global_uninit_boolean=(false||true));
    print global_global_uninit_int,' ';
    print global_global_uninit_char,' ';
    print global_global_uninit_str,' ';
    print global_global_uninit_boolean,' ';
    print '\n';
    if((global_global_uninit_int>100)) {
        print "greater\n";
    } 
    if((global_global_uninit_int>1000)) {
    } else {
        print "less\n";
    }
    i: integer;
    j: integer = 0;
    for((i=1);(i<5);(i++)) {
        (j=(j+i));
        print i,' ';
    }
    print '\n';
    print i,'\n';
    print j,'\n';
    (global_global_uninit_int=4032);
    if((global_global_uninit_int>1000)) {
        print "i am greater than 1000\n";
    } else {
        print "less\n";
    }
    print 1,2,3,4,5,6,7,8,'\n';
    print incr(incr(incr(incr(incr(incr(incr(incr(10)))))))),'\n';
    if((2<3)) {
        print "2<3\n";
    } else {
        print "never happen\n";
    }
    return 0;
    return 0;
    return 0;
}
==1113== 
==1113== HEAP SUMMARY:
==1113==     in use at exit: 109,757 bytes in 1,636 blocks
==1113==   total heap usage: 1,943 allocs, 307 frees, 111,344 bytes allocated
==1113== 
==1113== LEAK SUMMARY:
==1113==    definitely lost: 0 bytes in 0 blocks
==1113==    indirectly lost: 0 bytes in 0 blocks
==1113==      possibly lost: 0 bytes in 0 blocks
==1113==    still reachable: 109,757 bytes in 1,636 blocks
==1113==         suppressed: 0 bytes in 0 blocks
==1113== Reachable blocks (those to which a pointer was found) are not shown.
==1113== To see them, rerun with: --leak-check=full --show-reachable=yes
==1113== 
==1113== For counts of detected and suppressed errors, rerun with: -v
==1113== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1114== Memcheck, a memory error detector
==1114== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1114== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1114== Command: ./cminor -print good19.cminor
==1114== 
fib: function integer ( x: integer ) =
{
    if((x<1)) {
        return 0;
    } else {
        if((x<2)) {
            return 1;
        } else {
            return (fib((x-1))+fib((x-2)));
        }
    }
}
main: function integer () =
{
    print fib(0),'\n';
    print fib(1),'\n';
    print fib(2),'\n';
    print fib(3),'\n';
    print fib(4),'\n';
    print fib(5),'\n';
    print fib(6),'\n';
    print fib(7),'\n';
    print fib(8),'\n';
    print fib(9),'\n';
    print fib(10),'\n';
    return 0;
}
==1114== 
==1114== HEAP SUMMARY:
==1114==     in use at exit: 29,560 bytes in 143 blocks
==1114==   total heap usage: 164 allocs, 21 frees, 29,697 bytes allocated
==1114== 
==1114== LEAK SUMMARY:
==1114==    definitely lost: 0 bytes in 0 blocks
==1114==    indirectly lost: 0 bytes in 0 blocks
==1114==      possibly lost: 0 bytes in 0 blocks
==1114==    still reachable: 29,560 bytes in 143 blocks
==1114==         suppressed: 0 bytes in 0 blocks
==1114== Reachable blocks (those to which a pointer was found) are not shown.
==1114== To see them, rerun with: --leak-check=full --show-reachable=yes
==1114== 
==1114== For counts of detected and suppressed errors, rerun with: -v
==1114== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1115== Memcheck, a memory error detector
==1115== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1115== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1115== Command: ./cminor -print good20.cminor
==1115== 
exit: function void ( status: integer );
sum: function integer ( a: integer, b: integer ) =
{
    if((a>b)) {
        print "the first parameter should be <= the second parameter!\n";
        exit((-1));
    } 
    if((a==b)) {
        return a;
    } else {
        s: integer = 0;
        i: integer;
        for((i=a);(i<=b);(i++))
            (s=(s+i));
        return s;
    }
}
main: function integer () =
{
    print sum(1,5),'\n';
    print sum(5,5),'\n';
    print sum(1,10),'\n';
    print sum((-5),(-1)),'\n';
    return 0;
}
==1115== 
==1115== HEAP SUMMARY:
==1115==     in use at exit: 28,639 bytes in 135 blocks
==1115==   total heap usage: 153 allocs, 18 frees, 28,765 bytes allocated
==1115== 
==1115== LEAK SUMMARY:
==1115==    definitely lost: 0 bytes in 0 blocks
==1115==    indirectly lost: 0 bytes in 0 blocks
==1115==      possibly lost: 0 bytes in 0 blocks
==1115==    still reachable: 28,639 bytes in 135 blocks
==1115==         suppressed: 0 bytes in 0 blocks
==1115== Reachable blocks (those to which a pointer was found) are not shown.
==1115== To see them, rerun with: --leak-check=full --show-reachable=yes
==1115== 
==1115== For counts of detected and suppressed errors, rerun with: -v
==1115== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
