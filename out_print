==19132== Memcheck, a memory error detector
==19132== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19132== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19132== Command: ./cminor -print good1.cminor
==19132== 
func_test: function integer ();
str_create: function string ( str: string ) =
{
    print "parameter str: ",str,'\n';
    return "new string lol";
}
main: function integer () =
{
    str: string = "hello333";
    print "return value: ",str_create(str),'\n';
    print str_create(str_create(str_create(str_create(str_create(str_create(str_create(str_create(str_create(str_create(str_create(str)))))))))));
    return 0;
}
==19132== 
==19132== HEAP SUMMARY:
==19132==     in use at exit: 26,173 bytes in 91 blocks
==19132==   total heap usage: 97 allocs, 6 frees, 26,203 bytes allocated
==19132== 
==19132== LEAK SUMMARY:
==19132==    definitely lost: 0 bytes in 0 blocks
==19132==    indirectly lost: 0 bytes in 0 blocks
==19132==      possibly lost: 0 bytes in 0 blocks
==19132==    still reachable: 26,173 bytes in 91 blocks
==19132==         suppressed: 0 bytes in 0 blocks
==19132== Reachable blocks (those to which a pointer was found) are not shown.
==19132== To see them, rerun with: --leak-check=full --show-reachable=yes
==19132== 
==19132== For counts of detected and suppressed errors, rerun with: -v
==19132== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19133== Memcheck, a memory error detector
==19133== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19133== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19133== Command: ./cminor -print good2.cminor
==19133== 
main: function integer ( param1: integer, param2: char, param3: string, param4: boolean ) =
{
    x: integer = ((((((((((5-3)+0)+2)-2)+2)-2)+(2%1))+(2/20))+(0*34343))^(20-10));
    y: integer = 2048;
    z: integer = ((x+x)+((x*2)/10000));
    print x,'\n';
    print y,'\n';
    print z,'\n';
    b1: boolean = (y==z);
    b2: boolean = (x==y);
    s1: string = "hello";
    s2: string = "worl";
    b3: boolean;
    b4: boolean;
    (b3=(s1==s2));
    (b4=(s1!=s2));
    print b1,'\n';
    print b2,'\n';
    print b3,'\n';
    print b4,'\n';
    print ((100-20)-3),'\n';
    return 0;
}
==19133== 
==19133== HEAP SUMMARY:
==19133==     in use at exit: 31,212 bytes in 186 blocks
==19133==   total heap usage: 206 allocs, 20 frees, 31,312 bytes allocated
==19133== 
==19133== LEAK SUMMARY:
==19133==    definitely lost: 0 bytes in 0 blocks
==19133==    indirectly lost: 0 bytes in 0 blocks
==19133==      possibly lost: 0 bytes in 0 blocks
==19133==    still reachable: 31,212 bytes in 186 blocks
==19133==         suppressed: 0 bytes in 0 blocks
==19133== Reachable blocks (those to which a pointer was found) are not shown.
==19133== To see them, rerun with: --leak-check=full --show-reachable=yes
==19133== 
==19133== For counts of detected and suppressed errors, rerun with: -v
==19133== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19134== Memcheck, a memory error detector
==19134== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19134== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19134== Command: ./cminor -print good3.cminor
==19134== 
x1: integer = (2^((10-8)+(0/1)));
x2: string = "heeo\0dfdf\n";
x3: boolean = (((true&&(1<3))&&(1>5))||false);
x4: boolean = ("hello"=="hello");
x5: boolean = ("hello"!="word");
x6: char = 'u';
x: boolean;
y: integer;
z: string;
c: char;
main: function integer () =
{
    print x1,'\n';
    print x2,'\n';
    print x3,'\n';
    print x4,'\n';
    print x5,'\n';
    print x6,'\n';
    print '\n';
    print x,'\n';
    print y,'\n';
    print z,'\n';
    print c,'\n';
    print '\n';
    x1: integer = (x1+10);
    x2: string = "local string";
    x3: boolean = (x3||true);
    x4: boolean = (x4&&true);
    x: char = '-';
    y: string = "local y is string";
    z: integer = (1024/100);
    c: boolean = (x3||x4);
    print x1,'\n';
    print x2,'\n';
    print x3,'\n';
    print x4,'\n';
    print '\n';
    print x,'\n';
    print y,'\n';
    print z,'\n';
    print c,'\n';
    return 0;
}
==19134== 
==19134== HEAP SUMMARY:
==19134==     in use at exit: 33,916 bytes in 252 blocks
==19134==   total heap usage: 282 allocs, 30 frees, 34,066 bytes allocated
==19134== 
==19134== LEAK SUMMARY:
==19134==    definitely lost: 0 bytes in 0 blocks
==19134==    indirectly lost: 0 bytes in 0 blocks
==19134==      possibly lost: 0 bytes in 0 blocks
==19134==    still reachable: 33,916 bytes in 252 blocks
==19134==         suppressed: 0 bytes in 0 blocks
==19134== Reachable blocks (those to which a pointer was found) are not shown.
==19134== To see them, rerun with: --leak-check=full --show-reachable=yes
==19134== 
==19134== For counts of detected and suppressed errors, rerun with: -v
==19134== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19135== Memcheck, a memory error detector
==19135== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19135== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19135== Command: ./cminor -print good4.cminor
==19135== 
f1: function integer () =
{
    print "func return type: void\n";
    return 0;
}
f2: function integer () =
{
    print "func return type: integer\n";
}
f3: function char () =
{
    print "func return type: char\n";
}
f4: function string () =
{
    print "func return type: string\n";
    return "hello world";
}
f5: function boolean () =
{
    print "func return type: boolean\n";
}
main: function integer ( param1: integer, param2: char, param3: string, param4: boolean ) =
{
    print "test return type\n";
    print f2(),'\n';
    print f3(),'\n';
    print f5(),'\n';
    print f4(),'\n';
    return 0;
}
==19135== 
==19135== HEAP SUMMARY:
==19135==     in use at exit: 26,588 bytes in 101 blocks
==19135==   total heap usage: 114 allocs, 13 frees, 26,653 bytes allocated
==19135== 
==19135== LEAK SUMMARY:
==19135==    definitely lost: 0 bytes in 0 blocks
==19135==    indirectly lost: 0 bytes in 0 blocks
==19135==      possibly lost: 0 bytes in 0 blocks
==19135==    still reachable: 26,588 bytes in 101 blocks
==19135==         suppressed: 0 bytes in 0 blocks
==19135== Reachable blocks (those to which a pointer was found) are not shown.
==19135== To see them, rerun with: --leak-check=full --show-reachable=yes
==19135== 
==19135== For counts of detected and suppressed errors, rerun with: -v
==19135== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19137== Memcheck, a memory error detector
==19137== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19137== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19137== Command: ./cminor -print good5.cminor
==19137== 
main: function integer () =
{
    x1: integer;
    x2: integer;
    x3: integer;
    x4: integer;
    x5: integer;
    x6: integer;
    x7: integer;
    x8: integer;
    x9: integer;
    (x1=(x2=(x3=(x4=(x5=(x6=(x7=(x8=(x9=23456)))))))));
    print x1,'\n';
    print x2,'\n';
    print x3,'\n';
    print x4,'\n';
    print x5,'\n';
    print x6,'\n';
    print x7,'\n';
    print x8,'\n';
    print x9,'\n';
    return 0;
}
==19137== 
==19137== HEAP SUMMARY:
==19137==     in use at exit: 28,053 bytes in 132 blocks
==19137==   total heap usage: 152 allocs, 20 frees, 28,153 bytes allocated
==19137== 
==19137== LEAK SUMMARY:
==19137==    definitely lost: 0 bytes in 0 blocks
==19137==    indirectly lost: 0 bytes in 0 blocks
==19137==      possibly lost: 0 bytes in 0 blocks
==19137==    still reachable: 28,053 bytes in 132 blocks
==19137==         suppressed: 0 bytes in 0 blocks
==19137== Reachable blocks (those to which a pointer was found) are not shown.
==19137== To see them, rerun with: --leak-check=full --show-reachable=yes
==19137== 
==19137== For counts of detected and suppressed errors, rerun with: -v
==19137== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19138== Memcheck, a memory error detector
==19138== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19138== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19138== Command: ./cminor -print good6.cminor
==19138== 
main: function integer () =
{
    x1: integer = 2;
    x2: integer = 2;
    x3: integer = 2;
    x4: integer = 2;
    x5: integer = 2;
    x6: integer = 2;
    x7: integer = 2;
    x8: integer = 2;
    x9: integer = 2;
    x10: integer = ((((((((x1+x2)+x3)+x4)+x5)+x6)+x7)+x8)+x9);
    print x1,'\n';
    print x2,'\n';
    print x3,'\n';
    print x4,'\n';
    print x5,'\n';
    print x6,'\n';
    print x7,'\n';
    print x8,'\n';
    print x9,'\n';
    print x10,'\n';
    return 0;
}
==19138== 
==19138== HEAP SUMMARY:
==19138==     in use at exit: 28,954 bytes in 148 blocks
==19138==   total heap usage: 169 allocs, 21 frees, 29,059 bytes allocated
==19138== 
==19138== LEAK SUMMARY:
==19138==    definitely lost: 0 bytes in 0 blocks
==19138==    indirectly lost: 0 bytes in 0 blocks
==19138==      possibly lost: 0 bytes in 0 blocks
==19138==    still reachable: 28,954 bytes in 148 blocks
==19138==         suppressed: 0 bytes in 0 blocks
==19138== Reachable blocks (those to which a pointer was found) are not shown.
==19138== To see them, rerun with: --leak-check=full --show-reachable=yes
==19138== 
==19138== For counts of detected and suppressed errors, rerun with: -v
==19138== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19139== Memcheck, a memory error detector
==19139== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19139== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19139== Command: ./cminor -print good7.cminor
==19139== 
func1: function integer ( a: integer, b: char, c: char, d: char, e: char, f: char, g: char, h: char );
main: function integer () =
{
    print "main func\n";
    return 0;
}
==19139== 
==19139== HEAP SUMMARY:
==19139==     in use at exit: 23,339 bytes in 44 blocks
==19139==   total heap usage: 46 allocs, 2 frees, 23,349 bytes allocated
==19139== 
==19139== LEAK SUMMARY:
==19139==    definitely lost: 0 bytes in 0 blocks
==19139==    indirectly lost: 0 bytes in 0 blocks
==19139==      possibly lost: 0 bytes in 0 blocks
==19139==    still reachable: 23,339 bytes in 44 blocks
==19139==         suppressed: 0 bytes in 0 blocks
==19139== Reachable blocks (those to which a pointer was found) are not shown.
==19139== To see them, rerun with: --leak-check=full --show-reachable=yes
==19139== 
==19139== For counts of detected and suppressed errors, rerun with: -v
==19139== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19141== Memcheck, a memory error detector
==19141== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19141== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19141== Command: ./cminor -print good8.cminor
==19141== 
f: function integer ( x: integer, y: integer, z: integer ) =
{
    return ((x+y)+z);
}
main: function integer () =
{
    x: integer = 1;
    y: integer = 2;
    z: integer = 3;
    c: integer = 2;
    b: integer = 5;
    a: integer = 80;
    d: integer = 400;
    e: boolean = true;
    f1: boolean = false;
    g: boolean;
    (g=(f1||(e&&(d==(a+(b*c))))));
    print g,'\n';
    (g=(f1||(e&&(d==(a+(b*(c^f(x,y,z))))))));
    print g,'\n';
    return 0;
}
==19141== 
==19141== HEAP SUMMARY:
==19141==     in use at exit: 28,846 bytes in 151 blocks
==19141==   total heap usage: 167 allocs, 16 frees, 28,926 bytes allocated
==19141== 
==19141== LEAK SUMMARY:
==19141==    definitely lost: 0 bytes in 0 blocks
==19141==    indirectly lost: 0 bytes in 0 blocks
==19141==      possibly lost: 0 bytes in 0 blocks
==19141==    still reachable: 28,846 bytes in 151 blocks
==19141==         suppressed: 0 bytes in 0 blocks
==19141== Reachable blocks (those to which a pointer was found) are not shown.
==19141== To see them, rerun with: --leak-check=full --show-reachable=yes
==19141== 
==19141== For counts of detected and suppressed errors, rerun with: -v
==19141== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19142== Memcheck, a memory error detector
==19142== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19142== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19142== Command: ./cminor -print good9.cminor
==19142== 
main: function integer () =
{
    i: integer;
    s: integer = 0;
    for((i=1);(((i<5)&&(i>0))&&(s<20));(i++)) {
        (s=(s+i));
    }
    print s,'\n';
    (s=0);
    for((i=1);((i==1)&&(i<5));(i++)) {
        (s=(s+i));
    }
    print s,'\n';
    return 0;
}
==19142== 
==19142== HEAP SUMMARY:
==19142==     in use at exit: 26,873 bytes in 98 blocks
==19142==   total heap usage: 110 allocs, 12 frees, 26,941 bytes allocated
==19142== 
==19142== LEAK SUMMARY:
==19142==    definitely lost: 0 bytes in 0 blocks
==19142==    indirectly lost: 0 bytes in 0 blocks
==19142==      possibly lost: 0 bytes in 0 blocks
==19142==    still reachable: 26,873 bytes in 98 blocks
==19142==         suppressed: 0 bytes in 0 blocks
==19142== Reachable blocks (those to which a pointer was found) are not shown.
==19142== To see them, rerun with: --leak-check=full --show-reachable=yes
==19142== 
==19142== For counts of detected and suppressed errors, rerun with: -v
==19142== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19143== Memcheck, a memory error detector
==19143== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19143== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19143== Command: ./cminor -print good10.cminor
==19143== 
main: function integer () =
{
    print 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20;
    print '\n';
    return 0;
}
==19143== 
==19143== HEAP SUMMARY:
==19143==     in use at exit: 25,412 bytes in 56 blocks
==19143==   total heap usage: 59 allocs, 3 frees, 25,427 bytes allocated
==19143== 
==19143== LEAK SUMMARY:
==19143==    definitely lost: 0 bytes in 0 blocks
==19143==    indirectly lost: 0 bytes in 0 blocks
==19143==      possibly lost: 0 bytes in 0 blocks
==19143==    still reachable: 25,412 bytes in 56 blocks
==19143==         suppressed: 0 bytes in 0 blocks
==19143== Reachable blocks (those to which a pointer was found) are not shown.
==19143== To see them, rerun with: --leak-check=full --show-reachable=yes
==19143== 
==19143== For counts of detected and suppressed errors, rerun with: -v
==19143== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19144== Memcheck, a memory error detector
==19144== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19144== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19144== Command: ./cminor -print good11.cminor
==19144== 
main: function integer () =
{
    if((2<3)) {
        print "2<3\n";
    } else {
        print "never happen\n";
    }
    if(false)
        print "never enter\n";
    else
        print "always false\n";
    if(((!(!(!false)))&&(3>1)))
        print "!!!false\n";
    return 0;
}
==19144== 
==19144== HEAP SUMMARY:
==19144==     in use at exit: 24,398 bytes in 45 blocks
==19144==   total heap usage: 57 allocs, 12 frees, 24,478 bytes allocated
==19144== 
==19144== LEAK SUMMARY:
==19144==    definitely lost: 0 bytes in 0 blocks
==19144==    indirectly lost: 0 bytes in 0 blocks
==19144==      possibly lost: 0 bytes in 0 blocks
==19144==    still reachable: 24,398 bytes in 45 blocks
==19144==         suppressed: 0 bytes in 0 blocks
==19144== Reachable blocks (those to which a pointer was found) are not shown.
==19144== To see them, rerun with: --leak-check=full --show-reachable=yes
==19144== 
==19144== For counts of detected and suppressed errors, rerun with: -v
==19144== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19146== Memcheck, a memory error detector
==19146== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19146== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19146== Command: ./cminor -print good12.cminor
==19146== 
f: function integer () =
{
    print "f - a\n";
    print "f - b\n";
    return 0;
    print "f - c\n";
    return 0;
}
main: function integer () =
{
    print "main function\n";
    if((f()==0)) {
        print "f() return 0\n";
        return 0;
    } 
    print "f() ends\n";
    return 0;
    f();
    print "f() ends second time\n";
    return 0;
}
==19146== 
==19146== HEAP SUMMARY:
==19146==     in use at exit: 24,932 bytes in 58 blocks
==19146==   total heap usage: 73 allocs, 15 frees, 25,015 bytes allocated
==19146== 
==19146== LEAK SUMMARY:
==19146==    definitely lost: 0 bytes in 0 blocks
==19146==    indirectly lost: 0 bytes in 0 blocks
==19146==      possibly lost: 0 bytes in 0 blocks
==19146==    still reachable: 24,932 bytes in 58 blocks
==19146==         suppressed: 0 bytes in 0 blocks
==19146== Reachable blocks (those to which a pointer was found) are not shown.
==19146== To see them, rerun with: --leak-check=full --show-reachable=yes
==19146== 
==19146== For counts of detected and suppressed errors, rerun with: -v
==19146== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19147== Memcheck, a memory error detector
==19147== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19147== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19147== Command: ./cminor -print good13.cminor
==19147== 
x52: integer = 1;
x: integer = 2;
f52: function void ( x: integer ) =
{
    print x,'\n';
    {
        x: integer = 4;
    }
    print x,'\n';
    if((x52==1)) {
        x: integer = 5;
        print x,'\n';
    } 
    {
        x: integer;
        {
            {
                (x=6);
            }
        }
        {
            {
                {
                    print x,'\n';
                }
            }
        }
    }
    print x,'\n';
}
main: function integer () =
{
    print x,'\n';
    x: integer = 3;
    f52(x);
    return 0;
}
==19147== 
==19147== HEAP SUMMARY:
==19147==     in use at exit: 27,137 bytes in 108 blocks
==19147==   total heap usage: 137 allocs, 29 frees, 27,398 bytes allocated
==19147== 
==19147== LEAK SUMMARY:
==19147==    definitely lost: 0 bytes in 0 blocks
==19147==    indirectly lost: 0 bytes in 0 blocks
==19147==      possibly lost: 0 bytes in 0 blocks
==19147==    still reachable: 27,137 bytes in 108 blocks
==19147==         suppressed: 0 bytes in 0 blocks
==19147== Reachable blocks (those to which a pointer was found) are not shown.
==19147== To see them, rerun with: --leak-check=full --show-reachable=yes
==19147== 
==19147== For counts of detected and suppressed errors, rerun with: -v
==19147== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19167== Memcheck, a memory error detector
==19167== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19167== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19167== Command: ./cminor -print good14.cminor
==19167== 
main: function integer () =
{
    print "2^4";
    print '=';
    print (2^4);
    print '\n';
    print "2^0=",(2^0);
    print '\n';
    print "2^(-10)=";
    print (2^(-10));
    print '\n';
    print "(5-3+0+2-2+2-2+2%1+2/20+0*34343)^(20-10)=";
    print ((((((((((5-3)+0)+2)-2)+2)-2)+(2%1))+(2/20))+(0*34343))^(20-10));
    print '\n';
    print "2+4";
    print '\n';
    print (2+4);
    print '\n';
    print "2-4";
    print '\n';
    print (2-4);
    print '\n';
    print "2*4";
    print '\n';
    print (2*4);
    print '\n';
    print "29/4";
    print '\n';
    print (29/4);
    print '\n';
    print "29%4";
    print '\n';
    print (29%4);
    print '\n';
    return 0;
}
==19167== 
==19167== HEAP SUMMARY:
==19167==     in use at exit: 30,549 bytes in 148 blocks
==19167==   total heap usage: 181 allocs, 33 frees, 30,714 bytes allocated
==19167== 
==19167== LEAK SUMMARY:
==19167==    definitely lost: 0 bytes in 0 blocks
==19167==    indirectly lost: 0 bytes in 0 blocks
==19167==      possibly lost: 0 bytes in 0 blocks
==19167==    still reachable: 30,549 bytes in 148 blocks
==19167==         suppressed: 0 bytes in 0 blocks
==19167== Reachable blocks (those to which a pointer was found) are not shown.
==19167== To see them, rerun with: --leak-check=full --show-reachable=yes
==19167== 
==19167== For counts of detected and suppressed errors, rerun with: -v
==19167== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19168== Memcheck, a memory error detector
==19168== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19168== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19168== Command: ./cminor -print good15.cminor
==19168== 
main: function integer () =
{
    print "true && true";
    print '\n';
    print (true&&true);
    print '\n';
    print "false && false";
    print '\n';
    print (false&&false);
    print '\n';
    print "true && false";
    print '\n';
    print (true&&false);
    print '\n';
    print "true || true";
    print '\n';
    print (true||true);
    print '\n';
    print "false || false";
    print '\n';
    print (false||false);
    print '\n';
    print "true || false";
    print '\n';
    print (true||false);
    print '\n';
    return 0;
}
==19168== 
==19168== HEAP SUMMARY:
==19168==     in use at exit: 26,859 bytes in 91 blocks
==19168==   total heap usage: 116 allocs, 25 frees, 26,984 bytes allocated
==19168== 
==19168== LEAK SUMMARY:
==19168==    definitely lost: 0 bytes in 0 blocks
==19168==    indirectly lost: 0 bytes in 0 blocks
==19168==      possibly lost: 0 bytes in 0 blocks
==19168==    still reachable: 26,859 bytes in 91 blocks
==19168==         suppressed: 0 bytes in 0 blocks
==19168== Reachable blocks (those to which a pointer was found) are not shown.
==19168== To see them, rerun with: --leak-check=full --show-reachable=yes
==19168== 
==19168== For counts of detected and suppressed errors, rerun with: -v
==19168== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19169== Memcheck, a memory error detector
==19169== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19169== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19169== Command: ./cminor -print good16.cminor
==19169== 
main: function integer () =
{
    print "1 <= 2";
    print '\n';
    print (1<=2);
    print '\n';
    print "12345 <= 2";
    print '\n';
    print (12345<=2);
    print '\n';
    print " 500 +9 < 234";
    print '\n';
    print ((500+9)<234);
    print '\n';
    print " 5 +9 < 234";
    print '\n';
    print ((5+9)<234);
    print '\n';
    print "1 < 2";
    print '\n';
    print (1<2);
    print '\n';
    print "1 >= 2";
    print '\n';
    print (1>=2);
    print '\n';
    print "12345 >= 2";
    print '\n';
    print (12345>=2);
    print '\n';
    print " 500 +9 > 234";
    print '\n';
    print ((500+9)>234);
    print '\n';
    print " 5 +9 > 234";
    print '\n';
    print ((5+9)>234);
    print '\n';
    print "1 > 2";
    print '\n';
    print (1>2);
    print '\n';
    return 0;
}
==19169== 
==19169== HEAP SUMMARY:
==19169==     in use at exit: 30,379 bytes in 151 blocks
==19169==   total heap usage: 192 allocs, 41 frees, 30,584 bytes allocated
==19169== 
==19169== LEAK SUMMARY:
==19169==    definitely lost: 0 bytes in 0 blocks
==19169==    indirectly lost: 0 bytes in 0 blocks
==19169==      possibly lost: 0 bytes in 0 blocks
==19169==    still reachable: 30,379 bytes in 151 blocks
==19169==         suppressed: 0 bytes in 0 blocks
==19169== Reachable blocks (those to which a pointer was found) are not shown.
==19169== To see them, rerun with: --leak-check=full --show-reachable=yes
==19169== 
==19169== For counts of detected and suppressed errors, rerun with: -v
==19169== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19170== Memcheck, a memory error detector
==19170== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19170== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19170== Command: ./cminor -print good17.cminor
==19170== 
print_func: function integer ( x: integer, y: char, z: boolean, t: string ) =
{
    print x;
    print '\n';
    print y;
    print '\n';
    print z;
    print '\n';
    print t;
    print '\n';
    return 0;
}
main: function integer () =
{
    print "true == false";
    print '\n';
    print (true==false);
    print '\n';
    print "true == true";
    print '\n';
    print (true==true);
    print '\n';
    print "3 == 5";
    print '\n';
    print (3==5);
    print '\n';
    print "(2+1+0/234) == (5/4+2*1)";
    print '\n';
    print (((2+1)+(0/234))==((5/4)+(2*1)));
    print '\n';
    print "hello"," == ","word";
    print '\n';
    print ("hello"=="word");
    print '\n';
    print "hello"," != ","word";
    print '\n';
    print ("hello"!="word");
    print '\n';
    print "hello111"," == ","hello111";
    print '\n';
    print ("hello111"=="hello111");
    print '\n';
    print "'c' == 'd'";
    print '\n';
    print ('c'=='d');
    print '\n';
    print "3!=5";
    print '\n';
    print (3!=5);
    print '\n';
    print "'c' != 'd'";
    print '\n';
    print ('c'!='d');
    print '\n';
    print "true != false";
    print '\n';
    print (true!=false);
    print '\n';
    print "false != false";
    print '\n';
    print (false!=false);
    print '\n';
    x: integer = 4;
    print (x--),' ',x,'\n';
    print_func(222,'~',true,"hello haiyan meng");
    return 0;
}
==19170== 
==19170== HEAP SUMMARY:
==19170==     in use at exit: 36,674 bytes in 283 blocks
==19170==   total heap usage: 344 allocs, 61 frees, 36,979 bytes allocated
==19170== 
==19170== LEAK SUMMARY:
==19170==    definitely lost: 0 bytes in 0 blocks
==19170==    indirectly lost: 0 bytes in 0 blocks
==19170==      possibly lost: 0 bytes in 0 blocks
==19170==    still reachable: 36,674 bytes in 283 blocks
==19170==         suppressed: 0 bytes in 0 blocks
==19170== Reachable blocks (those to which a pointer was found) are not shown.
==19170== To see them, rerun with: --leak-check=full --show-reachable=yes
==19170== 
==19170== For counts of detected and suppressed errors, rerun with: -v
==19170== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19172== Memcheck, a memory error detector
==19172== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19172== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19172== Command: ./cminor -print good18.cminor
==19172== 
global_x: integer = (888+112);
global_x1: integer = (888-388);
global_x2: integer = (3*5);
global_x3: integer = (21/2);
global_x4: integer = (20%7);
global_x5: integer = (2^8);
global_x6: integer = ((((1+(2*3))-((5*2)/4))+(2^3))-(17%3));
global_y: char = 'o';
global_z: string = "i am global";
global_t1: boolean = (true&&true);
global_t2: boolean = false;
global_global_uninit_int: integer;
global_global_uninit_char: char;
global_global_uninit_str: string;
global_global_uninit_boolean: boolean;
func: function integer ( a: integer, b: char, c: char, d: integer, e: integer ) =
{
    local0: integer;
    local1: integer;
    local2: integer;
    local3: integer;
    (((a+global_x)+d)+e);
    (a+global_x);
    (a+e);
    return (a+1);
}
f: function void () =
{
    35;
    '\\';
    '\0';
    '\r';
    '\n';
    '\t';
    '5';
    "\h\t\n\0\\ello\0haiyan";
    "hello\t\\\n\0world";
    "haiyan\tmeng\\gezi\npeng\0end";
    "\h\t\n\\ello\0";
    true;
    false;
}
print_func: function void ( x: integer, y: char, z: boolean, t: string ) =
{
    print x;
    print '\n';
    print y;
    print '\n';
    print z;
    print '\n';
    print t;
    print '\n';
    return;
}
sum: function integer ( x: integer, y: integer ) =
{
    return (x+y);
}
incr: function integer ( x: integer ) =
{
    return (x+1);
}
main: function integer ( param1: integer, param2: char, param3: string, param4: boolean ) =
{
    print "2^4";
    print '\n';
    print (2^4);
    print '\n';
    print (2^0);
    print '\n';
    print (2^(-10));
    print '\n';
    print ((((((((((5-3)+0)+2)-2)+2)-2)+(2%1))+(2/20))+(0*34343))^(20-10));
    print '\n';
    if((2<3)) {
        print "2<3\n";
    } else {
        print "never happen\n";
    }
    print "2+4";
    print '\n';
    print (2+4);
    print '\n';
    print "2-4";
    print '\n';
    print (2-4);
    print '\n';
    print "2*4";
    print '\n';
    print (2*4);
    print '\n';
    print "29/4";
    print '\n';
    print (29/4);
    print '\n';
    print "29%4";
    print '\n';
    print (29%4);
    print '\n';
    print "true && true";
    print '\n';
    print (true&&true);
    print '\n';
    print "false && false";
    print '\n';
    print (false&&false);
    print '\n';
    print "true && false";
    print '\n';
    print (true&&false);
    print '\n';
    print "true || true";
    print '\n';
    print (true||true);
    print '\n';
    print "false || false";
    print '\n';
    print (false||false);
    print '\n';
    print "true || false";
    print '\n';
    print (true||false);
    print '\n';
    print "1 <= 2";
    print '\n';
    print (1<=2);
    print '\n';
    print "12345 <= 2";
    print '\n';
    print (12345<=2);
    print '\n';
    print " 500 +9 < 234";
    print '\n';
    print ((500+9)<234);
    print '\n';
    print " 5 +9 < 234";
    print '\n';
    print ((5+9)<234);
    print '\n';
    print "1 < 2";
    print '\n';
    print (1<2);
    print '\n';
    print "1 >= 2";
    print '\n';
    print (1>=2);
    print '\n';
    print "12345 >= 2";
    print '\n';
    print (12345>=2);
    print '\n';
    print " 500 +9 > 234";
    print '\n';
    print ((500+9)>234);
    print '\n';
    print " 5 +9 > 234";
    print '\n';
    print ((5+9)>234);
    print '\n';
    print "1 > 2";
    print '\n';
    print (1>2);
    print '\n';
    print "true == false";
    print '\n';
    print (true==false);
    print '\n';
    print "true == true";
    print '\n';
    print (true==true);
    print '\n';
    print "3 == 5";
    print '\n';
    print (3==5);
    print '\n';
    print "(2+1+0/234) == (5/4+2*1)";
    print '\n';
    print (((2+1)+(0/234))==((5/4)+(2*1)));
    print '\n';
    print "hello"," == ","word";
    print '\n';
    print ("hello"=="word");
    print '\n';
    print "hello"," != ","word";
    print '\n';
    print ("hello"!="word");
    print '\n';
    print "hello111"," == ","hello111";
    print '\n';
    print ("hello111"=="hello111");
    print '\n';
    print "'c' == 'd'";
    print '\n';
    print ('c'=='d');
    print '\n';
    print "3!=5";
    print '\n';
    print (3!=5);
    print '\n';
    print "'c' != 'd'";
    print '\n';
    print ('c'!='d');
    print '\n';
    print "true != false";
    print '\n';
    print (true!=false);
    print '\n';
    print "false != false";
    print '\n';
    print (false!=false);
    print '\n';
    print (1+23),"hello",'u',true,false;
    print 1;
    print '\n';
    print "hello";
    print '\n';
    print 'u';
    print '\n';
    print true;
    print '\n';
    print false;
    print '\n';
    print "sum(3+20)";
    print '\n';
    print sum(3,20);
    print '\n';
    print "!(3<20)";
    print '\n';
    print (!(3<20));
    print '\n';
    print "-(30-5)";
    print '\n';
    print (-(30-5));
    print '\n';
    x: integer = 2;
    x1: integer = 3;
    x2: integer = 4;
    x3: integer = 5;
    print x,' ',x1,' ',x2,' ',x3;
    print '\n';
    print (x+12);
    print '\n';
    print "x=2\n";
    print "x++ = ",(x++),", x= ",x,'\n';
    print "x++ = ",(x++),", x= ",x,'\n';
    print "x3=5\n";
    print "x3-- = ",(x3--),", x3= ",x3,'\n';
    print "x3-- = ",(x3--),", x3= ",x3,'\n';
    y: integer = (x++);
    print y,'\n';
    print x,'\n';
    (y=(-(-(-x))));
    print y,'\n';
    print x,'\n';
    print (y>x),' ',(!(y>x)),' ',(!(!(y>x))),' ',(!(!(!(y>x)))),'\n';
    if((!(y>x)))
        print "y<=x\n";
    else
        print "y>x\n";
    if(((!(y>x))||(!false)))
        print "y<=x || true\n";
    (x=(x1=(x3=x2)));
    print x," ",x1,' ';
    print x2,' ',x3,'\n';
    print_func(222,'~',true,"hello haiyan meng");
    print_func(222,'~',true,"hello haiyan meng");
    (x=8);
    print "x=8\n";
    print (x--),' ',x,'\n';
    (x=4);
    print "x=4\n";
    print (x++),' ',x,'\n';
    (x=3);
    print ((1+2)*3);
    print '\n';
    (param1=23);
    (param2='p');
    (param3="i am param3");
    (param4=(true&&false));
    print param1,' ',param2,' ';
    print param4,' ',param3,'\n';
    print_func(param1,param2,param4,param3);
    print global_x,' ';
    print global_x1,' ';
    print global_x2,' ';
    print global_x3,' ';
    print global_x4,' ';
    print global_x5,' ';
    print global_x6,' ';
    print global_y,' ';
    print global_z,' ';
    print global_t1,' ';
    print global_t2,' ';
    print global_global_uninit_int,' ';
    print global_global_uninit_char,' ';
    print global_global_uninit_str,' ';
    print global_global_uninit_boolean,' ';
    print '\n';
    (global_global_uninit_int=432);
    (global_global_uninit_char='i');
    (global_global_uninit_str="new string");
    (global_global_uninit_boolean=(false||true));
    print global_global_uninit_int,' ';
    print global_global_uninit_char,' ';
    print global_global_uninit_str,' ';
    print global_global_uninit_boolean,' ';
    print '\n';
    if((global_global_uninit_int>100)) {
        print "greater\n";
    } 
    if((global_global_uninit_int>1000)) {
    } else {
        print "less\n";
    }
    i: integer;
    j: integer = 0;
    for((i=1);(i<5);(i++)) {
        (j=(j+i));
        print i,' ';
    }
    print '\n';
    print i,'\n';
    print j,'\n';
    (global_global_uninit_int=4032);
    if((global_global_uninit_int>1000)) {
        print "i am greater than 1000\n";
    } else {
        print "less\n";
    }
    print 1,2,3,4,5,6,7,8,'\n';
    print incr(incr(incr(incr(incr(incr(incr(incr(10)))))))),'\n';
    if((2<3)) {
        print "2<3\n";
    } else {
        print "never happen\n";
    }
    return 0;
    return 0;
    return 0;
}
==19172== 
==19172== HEAP SUMMARY:
==19172==     in use at exit: 109,757 bytes in 1,636 blocks
==19172==   total heap usage: 1,943 allocs, 307 frees, 111,344 bytes allocated
==19172== 
==19172== LEAK SUMMARY:
==19172==    definitely lost: 0 bytes in 0 blocks
==19172==    indirectly lost: 0 bytes in 0 blocks
==19172==      possibly lost: 0 bytes in 0 blocks
==19172==    still reachable: 109,757 bytes in 1,636 blocks
==19172==         suppressed: 0 bytes in 0 blocks
==19172== Reachable blocks (those to which a pointer was found) are not shown.
==19172== To see them, rerun with: --leak-check=full --show-reachable=yes
==19172== 
==19172== For counts of detected and suppressed errors, rerun with: -v
==19172== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19173== Memcheck, a memory error detector
==19173== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19173== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19173== Command: ./cminor -print good19.cminor
==19173== 
fib: function integer ( x: integer ) =
{
    if((x<1)) {
        return 0;
    } else {
        if((x<2)) {
            return 1;
        } else {
            return (fib((x-1))+fib((x-2)));
        }
    }
}
main: function integer () =
{
    print fib(0),'\n';
    print fib(1),'\n';
    print fib(2),'\n';
    print fib(3),'\n';
    print fib(4),'\n';
    print fib(5),'\n';
    print fib(6),'\n';
    print fib(7),'\n';
    print fib(8),'\n';
    print fib(9),'\n';
    print fib(10),'\n';
    return 0;
}
==19173== 
==19173== HEAP SUMMARY:
==19173==     in use at exit: 29,560 bytes in 143 blocks
==19173==   total heap usage: 164 allocs, 21 frees, 29,697 bytes allocated
==19173== 
==19173== LEAK SUMMARY:
==19173==    definitely lost: 0 bytes in 0 blocks
==19173==    indirectly lost: 0 bytes in 0 blocks
==19173==      possibly lost: 0 bytes in 0 blocks
==19173==    still reachable: 29,560 bytes in 143 blocks
==19173==         suppressed: 0 bytes in 0 blocks
==19173== Reachable blocks (those to which a pointer was found) are not shown.
==19173== To see them, rerun with: --leak-check=full --show-reachable=yes
==19173== 
==19173== For counts of detected and suppressed errors, rerun with: -v
==19173== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==19174== Memcheck, a memory error detector
==19174== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==19174== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==19174== Command: ./cminor -print good20.cminor
==19174== 
exit: function void ( status: integer );
sum: function integer ( a: integer, b: integer ) =
{
    if((a>b)) {
        print "the first parameter should be <= the second parameter!\n";
        exit((-1));
    } 
    if((a==b)) {
        return a;
    } else {
        s: integer = 0;
        i: integer;
        for((i=a);(i<=b);(i++))
            (s=(s+i));
        return s;
    }
}
main: function integer () =
{
    print sum(1,5),'\n';
    print sum(5,5),'\n';
    print sum(1,10),'\n';
    print sum((-5),(-1)),'\n';
    return 0;
}
==19174== 
==19174== HEAP SUMMARY:
==19174==     in use at exit: 28,639 bytes in 135 blocks
==19174==   total heap usage: 153 allocs, 18 frees, 28,765 bytes allocated
==19174== 
==19174== LEAK SUMMARY:
==19174==    definitely lost: 0 bytes in 0 blocks
==19174==    indirectly lost: 0 bytes in 0 blocks
==19174==      possibly lost: 0 bytes in 0 blocks
==19174==    still reachable: 28,639 bytes in 135 blocks
==19174==         suppressed: 0 bytes in 0 blocks
==19174== Reachable blocks (those to which a pointer was found) are not shown.
==19174== To see them, rerun with: --leak-check=full --show-reachable=yes
==19174== 
==19174== For counts of detected and suppressed errors, rerun with: -v
==19174== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
