==1191== Memcheck, a memory error detector
==1191== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1191== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1191== Command: ./cminor -parse good1.cminor
==1191== 
func_test: function integer ();
str_create: function string ( str: string ) =
{
    print "parameter str: ",str,'\n';
    return "new string lol";
}
main: function integer () =
{
    str: string = "hello333";
    print "return value: ",str_create(str),'\n';
    print str_create(str_create(str_create(str_create(str_create(str_create(str_create(str_create(str_create(str_create(str_create(str)))))))))));
    return 0;
}
==1191== 
==1191== HEAP SUMMARY:
==1191==     in use at exit: 26,173 bytes in 91 blocks
==1191==   total heap usage: 97 allocs, 6 frees, 26,203 bytes allocated
==1191== 
==1191== LEAK SUMMARY:
==1191==    definitely lost: 0 bytes in 0 blocks
==1191==    indirectly lost: 0 bytes in 0 blocks
==1191==      possibly lost: 0 bytes in 0 blocks
==1191==    still reachable: 26,173 bytes in 91 blocks
==1191==         suppressed: 0 bytes in 0 blocks
==1191== Reachable blocks (those to which a pointer was found) are not shown.
==1191== To see them, rerun with: --leak-check=full --show-reachable=yes
==1191== 
==1191== For counts of detected and suppressed errors, rerun with: -v
==1191== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1193== Memcheck, a memory error detector
==1193== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1193== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1193== Command: ./cminor -parse good2.cminor
==1193== 
main: function integer ( param1: integer, param2: char, param3: string, param4: boolean ) =
{
    x: integer = ((((((((((5-3)+0)+2)-2)+2)-2)+(2%1))+(2/20))+(0*34343))^(20-10));
    y: integer = 2048;
    z: integer = ((x+x)+((x*2)/10000));
    print x,'\n';
    print y,'\n';
    print z,'\n';
    b1: boolean = (y==z);
    b2: boolean = (x==y);
    s1: string = "hello";
    s2: string = "worl";
    b3: boolean;
    b4: boolean;
    (b3=(s1==s2));
    (b4=(s1!=s2));
    print b1,'\n';
    print b2,'\n';
    print b3,'\n';
    print b4,'\n';
    print ((100-20)-3),'\n';
    return 0;
}
==1193== 
==1193== HEAP SUMMARY:
==1193==     in use at exit: 31,212 bytes in 186 blocks
==1193==   total heap usage: 206 allocs, 20 frees, 31,312 bytes allocated
==1193== 
==1193== LEAK SUMMARY:
==1193==    definitely lost: 0 bytes in 0 blocks
==1193==    indirectly lost: 0 bytes in 0 blocks
==1193==      possibly lost: 0 bytes in 0 blocks
==1193==    still reachable: 31,212 bytes in 186 blocks
==1193==         suppressed: 0 bytes in 0 blocks
==1193== Reachable blocks (those to which a pointer was found) are not shown.
==1193== To see them, rerun with: --leak-check=full --show-reachable=yes
==1193== 
==1193== For counts of detected and suppressed errors, rerun with: -v
==1193== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1194== Memcheck, a memory error detector
==1194== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1194== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1194== Command: ./cminor -parse good3.cminor
==1194== 
x1: integer = (2^((10-8)+(0/1)));
x2: string = "heeo\0dfdf\n";
x3: boolean = (((true&&(1<3))&&(1>5))||false);
x4: boolean = ("hello"=="hello");
x5: boolean = ("hello"!="word");
x6: char = 'u';
x: boolean;
y: integer;
z: string;
c: char;
main: function integer () =
{
    print x1,'\n';
    print x2,'\n';
    print x3,'\n';
    print x4,'\n';
    print x5,'\n';
    print x6,'\n';
    print '\n';
    print x,'\n';
    print y,'\n';
    print z,'\n';
    print c,'\n';
    print '\n';
    x1: integer = (x1+10);
    x2: string = "local string";
    x3: boolean = (x3||true);
    x4: boolean = (x4&&true);
    x: char = '-';
    y: string = "local y is string";
    z: integer = (1024/100);
    c: boolean = (x3||x4);
    print x1,'\n';
    print x2,'\n';
    print x3,'\n';
    print x4,'\n';
    print '\n';
    print x,'\n';
    print y,'\n';
    print z,'\n';
    print c,'\n';
    return 0;
}
==1194== 
==1194== HEAP SUMMARY:
==1194==     in use at exit: 33,916 bytes in 252 blocks
==1194==   total heap usage: 282 allocs, 30 frees, 34,066 bytes allocated
==1194== 
==1194== LEAK SUMMARY:
==1194==    definitely lost: 0 bytes in 0 blocks
==1194==    indirectly lost: 0 bytes in 0 blocks
==1194==      possibly lost: 0 bytes in 0 blocks
==1194==    still reachable: 33,916 bytes in 252 blocks
==1194==         suppressed: 0 bytes in 0 blocks
==1194== Reachable blocks (those to which a pointer was found) are not shown.
==1194== To see them, rerun with: --leak-check=full --show-reachable=yes
==1194== 
==1194== For counts of detected and suppressed errors, rerun with: -v
==1194== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1195== Memcheck, a memory error detector
==1195== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1195== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1195== Command: ./cminor -parse good4.cminor
==1195== 
f1: function integer () =
{
    print "func return type: void\n";
    return 0;
}
f2: function integer () =
{
    print "func return type: integer\n";
}
f3: function char () =
{
    print "func return type: char\n";
}
f4: function string () =
{
    print "func return type: string\n";
    return "hello world";
}
f5: function boolean () =
{
    print "func return type: boolean\n";
}
main: function integer ( param1: integer, param2: char, param3: string, param4: boolean ) =
{
    print "test return type\n";
    print f2(),'\n';
    print f3(),'\n';
    print f5(),'\n';
    print f4(),'\n';
    return 0;
}
==1195== 
==1195== HEAP SUMMARY:
==1195==     in use at exit: 26,588 bytes in 101 blocks
==1195==   total heap usage: 114 allocs, 13 frees, 26,653 bytes allocated
==1195== 
==1195== LEAK SUMMARY:
==1195==    definitely lost: 0 bytes in 0 blocks
==1195==    indirectly lost: 0 bytes in 0 blocks
==1195==      possibly lost: 0 bytes in 0 blocks
==1195==    still reachable: 26,588 bytes in 101 blocks
==1195==         suppressed: 0 bytes in 0 blocks
==1195== Reachable blocks (those to which a pointer was found) are not shown.
==1195== To see them, rerun with: --leak-check=full --show-reachable=yes
==1195== 
==1195== For counts of detected and suppressed errors, rerun with: -v
==1195== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1198== Memcheck, a memory error detector
==1198== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1198== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1198== Command: ./cminor -parse good5.cminor
==1198== 
main: function integer () =
{
    x1: integer;
    x2: integer;
    x3: integer;
    x4: integer;
    x5: integer;
    x6: integer;
    x7: integer;
    x8: integer;
    x9: integer;
    (x1=(x2=(x3=(x4=(x5=(x6=(x7=(x8=(x9=23456)))))))));
    print x1,'\n';
    print x2,'\n';
    print x3,'\n';
    print x4,'\n';
    print x5,'\n';
    print x6,'\n';
    print x7,'\n';
    print x8,'\n';
    print x9,'\n';
    return 0;
}
==1198== 
==1198== HEAP SUMMARY:
==1198==     in use at exit: 28,053 bytes in 132 blocks
==1198==   total heap usage: 152 allocs, 20 frees, 28,153 bytes allocated
==1198== 
==1198== LEAK SUMMARY:
==1198==    definitely lost: 0 bytes in 0 blocks
==1198==    indirectly lost: 0 bytes in 0 blocks
==1198==      possibly lost: 0 bytes in 0 blocks
==1198==    still reachable: 28,053 bytes in 132 blocks
==1198==         suppressed: 0 bytes in 0 blocks
==1198== Reachable blocks (those to which a pointer was found) are not shown.
==1198== To see them, rerun with: --leak-check=full --show-reachable=yes
==1198== 
==1198== For counts of detected and suppressed errors, rerun with: -v
==1198== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1199== Memcheck, a memory error detector
==1199== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1199== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1199== Command: ./cminor -parse good6.cminor
==1199== 
main: function integer () =
{
    x1: integer = 2;
    x2: integer = 2;
    x3: integer = 2;
    x4: integer = 2;
    x5: integer = 2;
    x6: integer = 2;
    x7: integer = 2;
    x8: integer = 2;
    x9: integer = 2;
    x10: integer = ((((((((x1+x2)+x3)+x4)+x5)+x6)+x7)+x8)+x9);
    print x1,'\n';
    print x2,'\n';
    print x3,'\n';
    print x4,'\n';
    print x5,'\n';
    print x6,'\n';
    print x7,'\n';
    print x8,'\n';
    print x9,'\n';
    print x10,'\n';
    return 0;
}
==1199== 
==1199== HEAP SUMMARY:
==1199==     in use at exit: 28,954 bytes in 148 blocks
==1199==   total heap usage: 169 allocs, 21 frees, 29,059 bytes allocated
==1199== 
==1199== LEAK SUMMARY:
==1199==    definitely lost: 0 bytes in 0 blocks
==1199==    indirectly lost: 0 bytes in 0 blocks
==1199==      possibly lost: 0 bytes in 0 blocks
==1199==    still reachable: 28,954 bytes in 148 blocks
==1199==         suppressed: 0 bytes in 0 blocks
==1199== Reachable blocks (those to which a pointer was found) are not shown.
==1199== To see them, rerun with: --leak-check=full --show-reachable=yes
==1199== 
==1199== For counts of detected and suppressed errors, rerun with: -v
==1199== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1200== Memcheck, a memory error detector
==1200== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1200== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1200== Command: ./cminor -parse good7.cminor
==1200== 
func1: function integer ( a: integer, b: char, c: char, d: char, e: char, f: char, g: char, h: char );
main: function integer () =
{
    print "main func\n";
    return 0;
}
==1200== 
==1200== HEAP SUMMARY:
==1200==     in use at exit: 23,339 bytes in 44 blocks
==1200==   total heap usage: 46 allocs, 2 frees, 23,349 bytes allocated
==1200== 
==1200== LEAK SUMMARY:
==1200==    definitely lost: 0 bytes in 0 blocks
==1200==    indirectly lost: 0 bytes in 0 blocks
==1200==      possibly lost: 0 bytes in 0 blocks
==1200==    still reachable: 23,339 bytes in 44 blocks
==1200==         suppressed: 0 bytes in 0 blocks
==1200== Reachable blocks (those to which a pointer was found) are not shown.
==1200== To see them, rerun with: --leak-check=full --show-reachable=yes
==1200== 
==1200== For counts of detected and suppressed errors, rerun with: -v
==1200== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1202== Memcheck, a memory error detector
==1202== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1202== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1202== Command: ./cminor -parse good8.cminor
==1202== 
f: function integer ( x: integer, y: integer, z: integer ) =
{
    return ((x+y)+z);
}
main: function integer () =
{
    x: integer = 1;
    y: integer = 2;
    z: integer = 3;
    c: integer = 2;
    b: integer = 5;
    a: integer = 80;
    d: integer = 400;
    e: boolean = true;
    f1: boolean = false;
    g: boolean;
    (g=(f1||(e&&(d==(a+(b*c))))));
    print g,'\n';
    (g=(f1||(e&&(d==(a+(b*(c^f(x,y,z))))))));
    print g,'\n';
    return 0;
}
==1202== 
==1202== HEAP SUMMARY:
==1202==     in use at exit: 28,846 bytes in 151 blocks
==1202==   total heap usage: 167 allocs, 16 frees, 28,926 bytes allocated
==1202== 
==1202== LEAK SUMMARY:
==1202==    definitely lost: 0 bytes in 0 blocks
==1202==    indirectly lost: 0 bytes in 0 blocks
==1202==      possibly lost: 0 bytes in 0 blocks
==1202==    still reachable: 28,846 bytes in 151 blocks
==1202==         suppressed: 0 bytes in 0 blocks
==1202== Reachable blocks (those to which a pointer was found) are not shown.
==1202== To see them, rerun with: --leak-check=full --show-reachable=yes
==1202== 
==1202== For counts of detected and suppressed errors, rerun with: -v
==1202== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1203== Memcheck, a memory error detector
==1203== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1203== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1203== Command: ./cminor -parse good9.cminor
==1203== 
main: function integer () =
{
    i: integer;
    s: integer = 0;
    for((i=1);(((i<5)&&(i>0))&&(s<20));(i++)) {
        (s=(s+i));
    }
    print s,'\n';
    (s=0);
    for((i=1);((i==1)&&(i<5));(i++)) {
        (s=(s+i));
    }
    print s,'\n';
    return 0;
}
==1203== 
==1203== HEAP SUMMARY:
==1203==     in use at exit: 26,873 bytes in 98 blocks
==1203==   total heap usage: 110 allocs, 12 frees, 26,941 bytes allocated
==1203== 
==1203== LEAK SUMMARY:
==1203==    definitely lost: 0 bytes in 0 blocks
==1203==    indirectly lost: 0 bytes in 0 blocks
==1203==      possibly lost: 0 bytes in 0 blocks
==1203==    still reachable: 26,873 bytes in 98 blocks
==1203==         suppressed: 0 bytes in 0 blocks
==1203== Reachable blocks (those to which a pointer was found) are not shown.
==1203== To see them, rerun with: --leak-check=full --show-reachable=yes
==1203== 
==1203== For counts of detected and suppressed errors, rerun with: -v
==1203== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1204== Memcheck, a memory error detector
==1204== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1204== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1204== Command: ./cminor -parse good10.cminor
==1204== 
main: function integer () =
{
    print 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20;
    print '\n';
    return 0;
}
==1204== 
==1204== HEAP SUMMARY:
==1204==     in use at exit: 25,412 bytes in 56 blocks
==1204==   total heap usage: 59 allocs, 3 frees, 25,427 bytes allocated
==1204== 
==1204== LEAK SUMMARY:
==1204==    definitely lost: 0 bytes in 0 blocks
==1204==    indirectly lost: 0 bytes in 0 blocks
==1204==      possibly lost: 0 bytes in 0 blocks
==1204==    still reachable: 25,412 bytes in 56 blocks
==1204==         suppressed: 0 bytes in 0 blocks
==1204== Reachable blocks (those to which a pointer was found) are not shown.
==1204== To see them, rerun with: --leak-check=full --show-reachable=yes
==1204== 
==1204== For counts of detected and suppressed errors, rerun with: -v
==1204== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1205== Memcheck, a memory error detector
==1205== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1205== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1205== Command: ./cminor -parse good11.cminor
==1205== 
main: function integer () =
{
    if((2<3)) {
        print "2<3\n";
    } else {
        print "never happen\n";
    }
    if(false)
        print "never enter\n";
    else
        print "always false\n";
    if(((!(!(!false)))&&(3>1)))
        print "!!!false\n";
    return 0;
}
==1205== 
==1205== HEAP SUMMARY:
==1205==     in use at exit: 24,398 bytes in 45 blocks
==1205==   total heap usage: 57 allocs, 12 frees, 24,478 bytes allocated
==1205== 
==1205== LEAK SUMMARY:
==1205==    definitely lost: 0 bytes in 0 blocks
==1205==    indirectly lost: 0 bytes in 0 blocks
==1205==      possibly lost: 0 bytes in 0 blocks
==1205==    still reachable: 24,398 bytes in 45 blocks
==1205==         suppressed: 0 bytes in 0 blocks
==1205== Reachable blocks (those to which a pointer was found) are not shown.
==1205== To see them, rerun with: --leak-check=full --show-reachable=yes
==1205== 
==1205== For counts of detected and suppressed errors, rerun with: -v
==1205== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1206== Memcheck, a memory error detector
==1206== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1206== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1206== Command: ./cminor -parse good12.cminor
==1206== 
f: function integer () =
{
    print "f - a\n";
    print "f - b\n";
    return 0;
    print "f - c\n";
    return 0;
}
main: function integer () =
{
    print "main function\n";
    if((f()==0)) {
        print "f() return 0\n";
        return 0;
    } 
    print "f() ends\n";
    return 0;
    f();
    print "f() ends second time\n";
    return 0;
}
==1206== 
==1206== HEAP SUMMARY:
==1206==     in use at exit: 24,932 bytes in 58 blocks
==1206==   total heap usage: 73 allocs, 15 frees, 25,015 bytes allocated
==1206== 
==1206== LEAK SUMMARY:
==1206==    definitely lost: 0 bytes in 0 blocks
==1206==    indirectly lost: 0 bytes in 0 blocks
==1206==      possibly lost: 0 bytes in 0 blocks
==1206==    still reachable: 24,932 bytes in 58 blocks
==1206==         suppressed: 0 bytes in 0 blocks
==1206== Reachable blocks (those to which a pointer was found) are not shown.
==1206== To see them, rerun with: --leak-check=full --show-reachable=yes
==1206== 
==1206== For counts of detected and suppressed errors, rerun with: -v
==1206== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1207== Memcheck, a memory error detector
==1207== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1207== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1207== Command: ./cminor -parse good13.cminor
==1207== 
x52: integer = 1;
x: integer = 2;
f52: function void ( x: integer ) =
{
    print x,'\n';
    {
        x: integer = 4;
    }
    print x,'\n';
    if((x52==1)) {
        x: integer = 5;
        print x,'\n';
    } 
    {
        x: integer;
        {
            {
                (x=6);
            }
        }
        {
            {
                {
                    print x,'\n';
                }
            }
        }
    }
    print x,'\n';
}
main: function integer () =
{
    print x,'\n';
    x: integer = 3;
    f52(x);
    return 0;
}
==1207== 
==1207== HEAP SUMMARY:
==1207==     in use at exit: 27,137 bytes in 108 blocks
==1207==   total heap usage: 137 allocs, 29 frees, 27,398 bytes allocated
==1207== 
==1207== LEAK SUMMARY:
==1207==    definitely lost: 0 bytes in 0 blocks
==1207==    indirectly lost: 0 bytes in 0 blocks
==1207==      possibly lost: 0 bytes in 0 blocks
==1207==    still reachable: 27,137 bytes in 108 blocks
==1207==         suppressed: 0 bytes in 0 blocks
==1207== Reachable blocks (those to which a pointer was found) are not shown.
==1207== To see them, rerun with: --leak-check=full --show-reachable=yes
==1207== 
==1207== For counts of detected and suppressed errors, rerun with: -v
==1207== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1208== Memcheck, a memory error detector
==1208== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1208== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1208== Command: ./cminor -parse good14.cminor
==1208== 
main: function integer () =
{
    print "2^4";
    print '=';
    print (2^4);
    print '\n';
    print "2^0=",(2^0);
    print '\n';
    print "2^(-10)=";
    print (2^(-10));
    print '\n';
    print "(5-3+0+2-2+2-2+2%1+2/20+0*34343)^(20-10)=";
    print ((((((((((5-3)+0)+2)-2)+2)-2)+(2%1))+(2/20))+(0*34343))^(20-10));
    print '\n';
    print "2+4";
    print '\n';
    print (2+4);
    print '\n';
    print "2-4";
    print '\n';
    print (2-4);
    print '\n';
    print "2*4";
    print '\n';
    print (2*4);
    print '\n';
    print "29/4";
    print '\n';
    print (29/4);
    print '\n';
    print "29%4";
    print '\n';
    print (29%4);
    print '\n';
    return 0;
}
==1208== 
==1208== HEAP SUMMARY:
==1208==     in use at exit: 30,549 bytes in 148 blocks
==1208==   total heap usage: 181 allocs, 33 frees, 30,714 bytes allocated
==1208== 
==1208== LEAK SUMMARY:
==1208==    definitely lost: 0 bytes in 0 blocks
==1208==    indirectly lost: 0 bytes in 0 blocks
==1208==      possibly lost: 0 bytes in 0 blocks
==1208==    still reachable: 30,549 bytes in 148 blocks
==1208==         suppressed: 0 bytes in 0 blocks
==1208== Reachable blocks (those to which a pointer was found) are not shown.
==1208== To see them, rerun with: --leak-check=full --show-reachable=yes
==1208== 
==1208== For counts of detected and suppressed errors, rerun with: -v
==1208== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1210== Memcheck, a memory error detector
==1210== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1210== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1210== Command: ./cminor -parse good15.cminor
==1210== 
main: function integer () =
{
    print "true && true";
    print '\n';
    print (true&&true);
    print '\n';
    print "false && false";
    print '\n';
    print (false&&false);
    print '\n';
    print "true && false";
    print '\n';
    print (true&&false);
    print '\n';
    print "true || true";
    print '\n';
    print (true||true);
    print '\n';
    print "false || false";
    print '\n';
    print (false||false);
    print '\n';
    print "true || false";
    print '\n';
    print (true||false);
    print '\n';
    return 0;
}
==1210== 
==1210== HEAP SUMMARY:
==1210==     in use at exit: 26,859 bytes in 91 blocks
==1210==   total heap usage: 116 allocs, 25 frees, 26,984 bytes allocated
==1210== 
==1210== LEAK SUMMARY:
==1210==    definitely lost: 0 bytes in 0 blocks
==1210==    indirectly lost: 0 bytes in 0 blocks
==1210==      possibly lost: 0 bytes in 0 blocks
==1210==    still reachable: 26,859 bytes in 91 blocks
==1210==         suppressed: 0 bytes in 0 blocks
==1210== Reachable blocks (those to which a pointer was found) are not shown.
==1210== To see them, rerun with: --leak-check=full --show-reachable=yes
==1210== 
==1210== For counts of detected and suppressed errors, rerun with: -v
==1210== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1211== Memcheck, a memory error detector
==1211== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1211== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1211== Command: ./cminor -parse good16.cminor
==1211== 
main: function integer () =
{
    print "1 <= 2";
    print '\n';
    print (1<=2);
    print '\n';
    print "12345 <= 2";
    print '\n';
    print (12345<=2);
    print '\n';
    print " 500 +9 < 234";
    print '\n';
    print ((500+9)<234);
    print '\n';
    print " 5 +9 < 234";
    print '\n';
    print ((5+9)<234);
    print '\n';
    print "1 < 2";
    print '\n';
    print (1<2);
    print '\n';
    print "1 >= 2";
    print '\n';
    print (1>=2);
    print '\n';
    print "12345 >= 2";
    print '\n';
    print (12345>=2);
    print '\n';
    print " 500 +9 > 234";
    print '\n';
    print ((500+9)>234);
    print '\n';
    print " 5 +9 > 234";
    print '\n';
    print ((5+9)>234);
    print '\n';
    print "1 > 2";
    print '\n';
    print (1>2);
    print '\n';
    return 0;
}
==1211== 
==1211== HEAP SUMMARY:
==1211==     in use at exit: 30,379 bytes in 151 blocks
==1211==   total heap usage: 192 allocs, 41 frees, 30,584 bytes allocated
==1211== 
==1211== LEAK SUMMARY:
==1211==    definitely lost: 0 bytes in 0 blocks
==1211==    indirectly lost: 0 bytes in 0 blocks
==1211==      possibly lost: 0 bytes in 0 blocks
==1211==    still reachable: 30,379 bytes in 151 blocks
==1211==         suppressed: 0 bytes in 0 blocks
==1211== Reachable blocks (those to which a pointer was found) are not shown.
==1211== To see them, rerun with: --leak-check=full --show-reachable=yes
==1211== 
==1211== For counts of detected and suppressed errors, rerun with: -v
==1211== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1212== Memcheck, a memory error detector
==1212== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1212== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1212== Command: ./cminor -parse good17.cminor
==1212== 
print_func: function integer ( x: integer, y: char, z: boolean, t: string ) =
{
    print x;
    print '\n';
    print y;
    print '\n';
    print z;
    print '\n';
    print t;
    print '\n';
    return 0;
}
main: function integer () =
{
    print "true == false";
    print '\n';
    print (true==false);
    print '\n';
    print "true == true";
    print '\n';
    print (true==true);
    print '\n';
    print "3 == 5";
    print '\n';
    print (3==5);
    print '\n';
    print "(2+1+0/234) == (5/4+2*1)";
    print '\n';
    print (((2+1)+(0/234))==((5/4)+(2*1)));
    print '\n';
    print "hello"," == ","word";
    print '\n';
    print ("hello"=="word");
    print '\n';
    print "hello"," != ","word";
    print '\n';
    print ("hello"!="word");
    print '\n';
    print "hello111"," == ","hello111";
    print '\n';
    print ("hello111"=="hello111");
    print '\n';
    print "'c' == 'd'";
    print '\n';
    print ('c'=='d');
    print '\n';
    print "3!=5";
    print '\n';
    print (3!=5);
    print '\n';
    print "'c' != 'd'";
    print '\n';
    print ('c'!='d');
    print '\n';
    print "true != false";
    print '\n';
    print (true!=false);
    print '\n';
    print "false != false";
    print '\n';
    print (false!=false);
    print '\n';
    x: integer = 4;
    print (x--),' ',x,'\n';
    print_func(222,'~',true,"hello haiyan meng");
    return 0;
}
==1212== 
==1212== HEAP SUMMARY:
==1212==     in use at exit: 36,674 bytes in 283 blocks
==1212==   total heap usage: 344 allocs, 61 frees, 36,979 bytes allocated
==1212== 
==1212== LEAK SUMMARY:
==1212==    definitely lost: 0 bytes in 0 blocks
==1212==    indirectly lost: 0 bytes in 0 blocks
==1212==      possibly lost: 0 bytes in 0 blocks
==1212==    still reachable: 36,674 bytes in 283 blocks
==1212==         suppressed: 0 bytes in 0 blocks
==1212== Reachable blocks (those to which a pointer was found) are not shown.
==1212== To see them, rerun with: --leak-check=full --show-reachable=yes
==1212== 
==1212== For counts of detected and suppressed errors, rerun with: -v
==1212== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1213== Memcheck, a memory error detector
==1213== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1213== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1213== Command: ./cminor -parse good18.cminor
==1213== 
global_x: integer = (888+112);
global_x1: integer = (888-388);
global_x2: integer = (3*5);
global_x3: integer = (21/2);
global_x4: integer = (20%7);
global_x5: integer = (2^8);
global_x6: integer = ((((1+(2*3))-((5*2)/4))+(2^3))-(17%3));
global_y: char = 'o';
global_z: string = "i am global";
global_t1: boolean = (true&&true);
global_t2: boolean = false;
global_global_uninit_int: integer;
global_global_uninit_char: char;
global_global_uninit_str: string;
global_global_uninit_boolean: boolean;
func: function integer ( a: integer, b: char, c: char, d: integer, e: integer ) =
{
    local0: integer;
    local1: integer;
    local2: integer;
    local3: integer;
    (((a+global_x)+d)+e);
    (a+global_x);
    (a+e);
    return (a+1);
}
f: function void () =
{
    35;
    '\\';
    '\0';
    '\r';
    '\n';
    '\t';
    '5';
    "\h\t\n\0\\ello\0haiyan";
    "hello\t\\\n\0world";
    "haiyan\tmeng\\gezi\npeng\0end";
    "\h\t\n\\ello\0";
    true;
    false;
}
print_func: function void ( x: integer, y: char, z: boolean, t: string ) =
{
    print x;
    print '\n';
    print y;
    print '\n';
    print z;
    print '\n';
    print t;
    print '\n';
    return;
}
sum: function integer ( x: integer, y: integer ) =
{
    return (x+y);
}
incr: function integer ( x: integer ) =
{
    return (x+1);
}
main: function integer ( param1: integer, param2: char, param3: string, param4: boolean ) =
{
    print "2^4";
    print '\n';
    print (2^4);
    print '\n';
    print (2^0);
    print '\n';
    print (2^(-10));
    print '\n';
    print ((((((((((5-3)+0)+2)-2)+2)-2)+(2%1))+(2/20))+(0*34343))^(20-10));
    print '\n';
    if((2<3)) {
        print "2<3\n";
    } else {
        print "never happen\n";
    }
    print "2+4";
    print '\n';
    print (2+4);
    print '\n';
    print "2-4";
    print '\n';
    print (2-4);
    print '\n';
    print "2*4";
    print '\n';
    print (2*4);
    print '\n';
    print "29/4";
    print '\n';
    print (29/4);
    print '\n';
    print "29%4";
    print '\n';
    print (29%4);
    print '\n';
    print "true && true";
    print '\n';
    print (true&&true);
    print '\n';
    print "false && false";
    print '\n';
    print (false&&false);
    print '\n';
    print "true && false";
    print '\n';
    print (true&&false);
    print '\n';
    print "true || true";
    print '\n';
    print (true||true);
    print '\n';
    print "false || false";
    print '\n';
    print (false||false);
    print '\n';
    print "true || false";
    print '\n';
    print (true||false);
    print '\n';
    print "1 <= 2";
    print '\n';
    print (1<=2);
    print '\n';
    print "12345 <= 2";
    print '\n';
    print (12345<=2);
    print '\n';
    print " 500 +9 < 234";
    print '\n';
    print ((500+9)<234);
    print '\n';
    print " 5 +9 < 234";
    print '\n';
    print ((5+9)<234);
    print '\n';
    print "1 < 2";
    print '\n';
    print (1<2);
    print '\n';
    print "1 >= 2";
    print '\n';
    print (1>=2);
    print '\n';
    print "12345 >= 2";
    print '\n';
    print (12345>=2);
    print '\n';
    print " 500 +9 > 234";
    print '\n';
    print ((500+9)>234);
    print '\n';
    print " 5 +9 > 234";
    print '\n';
    print ((5+9)>234);
    print '\n';
    print "1 > 2";
    print '\n';
    print (1>2);
    print '\n';
    print "true == false";
    print '\n';
    print (true==false);
    print '\n';
    print "true == true";
    print '\n';
    print (true==true);
    print '\n';
    print "3 == 5";
    print '\n';
    print (3==5);
    print '\n';
    print "(2+1+0/234) == (5/4+2*1)";
    print '\n';
    print (((2+1)+(0/234))==((5/4)+(2*1)));
    print '\n';
    print "hello"," == ","word";
    print '\n';
    print ("hello"=="word");
    print '\n';
    print "hello"," != ","word";
    print '\n';
    print ("hello"!="word");
    print '\n';
    print "hello111"," == ","hello111";
    print '\n';
    print ("hello111"=="hello111");
    print '\n';
    print "'c' == 'd'";
    print '\n';
    print ('c'=='d');
    print '\n';
    print "3!=5";
    print '\n';
    print (3!=5);
    print '\n';
    print "'c' != 'd'";
    print '\n';
    print ('c'!='d');
    print '\n';
    print "true != false";
    print '\n';
    print (true!=false);
    print '\n';
    print "false != false";
    print '\n';
    print (false!=false);
    print '\n';
    print (1+23),"hello",'u',true,false;
    print 1;
    print '\n';
    print "hello";
    print '\n';
    print 'u';
    print '\n';
    print true;
    print '\n';
    print false;
    print '\n';
    print "sum(3+20)";
    print '\n';
    print sum(3,20);
    print '\n';
    print "!(3<20)";
    print '\n';
    print (!(3<20));
    print '\n';
    print "-(30-5)";
    print '\n';
    print (-(30-5));
    print '\n';
    x: integer = 2;
    x1: integer = 3;
    x2: integer = 4;
    x3: integer = 5;
    print x,' ',x1,' ',x2,' ',x3;
    print '\n';
    print (x+12);
    print '\n';
    print "x=2\n";
    print "x++ = ",(x++),", x= ",x,'\n';
    print "x++ = ",(x++),", x= ",x,'\n';
    print "x3=5\n";
    print "x3-- = ",(x3--),", x3= ",x3,'\n';
    print "x3-- = ",(x3--),", x3= ",x3,'\n';
    y: integer = (x++);
    print y,'\n';
    print x,'\n';
    (y=(-(-(-x))));
    print y,'\n';
    print x,'\n';
    print (y>x),' ',(!(y>x)),' ',(!(!(y>x))),' ',(!(!(!(y>x)))),'\n';
    if((!(y>x)))
        print "y<=x\n";
    else
        print "y>x\n";
    if(((!(y>x))||(!false)))
        print "y<=x || true\n";
    (x=(x1=(x3=x2)));
    print x," ",x1,' ';
    print x2,' ',x3,'\n';
    print_func(222,'~',true,"hello haiyan meng");
    print_func(222,'~',true,"hello haiyan meng");
    (x=8);
    print "x=8\n";
    print (x--),' ',x,'\n';
    (x=4);
    print "x=4\n";
    print (x++),' ',x,'\n';
    (x=3);
    print ((1+2)*3);
    print '\n';
    (param1=23);
    (param2='p');
    (param3="i am param3");
    (param4=(true&&false));
    print param1,' ',param2,' ';
    print param4,' ',param3,'\n';
    print_func(param1,param2,param4,param3);
    print global_x,' ';
    print global_x1,' ';
    print global_x2,' ';
    print global_x3,' ';
    print global_x4,' ';
    print global_x5,' ';
    print global_x6,' ';
    print global_y,' ';
    print global_z,' ';
    print global_t1,' ';
    print global_t2,' ';
    print global_global_uninit_int,' ';
    print global_global_uninit_char,' ';
    print global_global_uninit_str,' ';
    print global_global_uninit_boolean,' ';
    print '\n';
    (global_global_uninit_int=432);
    (global_global_uninit_char='i');
    (global_global_uninit_str="new string");
    (global_global_uninit_boolean=(false||true));
    print global_global_uninit_int,' ';
    print global_global_uninit_char,' ';
    print global_global_uninit_str,' ';
    print global_global_uninit_boolean,' ';
    print '\n';
    if((global_global_uninit_int>100)) {
        print "greater\n";
    } 
    if((global_global_uninit_int>1000)) {
    } else {
        print "less\n";
    }
    i: integer;
    j: integer = 0;
    for((i=1);(i<5);(i++)) {
        (j=(j+i));
        print i,' ';
    }
    print '\n';
    print i,'\n';
    print j,'\n';
    (global_global_uninit_int=4032);
    if((global_global_uninit_int>1000)) {
        print "i am greater than 1000\n";
    } else {
        print "less\n";
    }
    print 1,2,3,4,5,6,7,8,'\n';
    print incr(incr(incr(incr(incr(incr(incr(incr(10)))))))),'\n';
    if((2<3)) {
        print "2<3\n";
    } else {
        print "never happen\n";
    }
    return 0;
    return 0;
    return 0;
}
==1213== 
==1213== HEAP SUMMARY:
==1213==     in use at exit: 109,757 bytes in 1,636 blocks
==1213==   total heap usage: 1,943 allocs, 307 frees, 111,344 bytes allocated
==1213== 
==1213== LEAK SUMMARY:
==1213==    definitely lost: 0 bytes in 0 blocks
==1213==    indirectly lost: 0 bytes in 0 blocks
==1213==      possibly lost: 0 bytes in 0 blocks
==1213==    still reachable: 109,757 bytes in 1,636 blocks
==1213==         suppressed: 0 bytes in 0 blocks
==1213== Reachable blocks (those to which a pointer was found) are not shown.
==1213== To see them, rerun with: --leak-check=full --show-reachable=yes
==1213== 
==1213== For counts of detected and suppressed errors, rerun with: -v
==1213== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1214== Memcheck, a memory error detector
==1214== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1214== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1214== Command: ./cminor -parse good19.cminor
==1214== 
fib: function integer ( x: integer ) =
{
    if((x<1)) {
        return 0;
    } else {
        if((x<2)) {
            return 1;
        } else {
            return (fib((x-1))+fib((x-2)));
        }
    }
}
main: function integer () =
{
    print fib(0),'\n';
    print fib(1),'\n';
    print fib(2),'\n';
    print fib(3),'\n';
    print fib(4),'\n';
    print fib(5),'\n';
    print fib(6),'\n';
    print fib(7),'\n';
    print fib(8),'\n';
    print fib(9),'\n';
    print fib(10),'\n';
    return 0;
}
==1214== 
==1214== HEAP SUMMARY:
==1214==     in use at exit: 29,560 bytes in 143 blocks
==1214==   total heap usage: 164 allocs, 21 frees, 29,697 bytes allocated
==1214== 
==1214== LEAK SUMMARY:
==1214==    definitely lost: 0 bytes in 0 blocks
==1214==    indirectly lost: 0 bytes in 0 blocks
==1214==      possibly lost: 0 bytes in 0 blocks
==1214==    still reachable: 29,560 bytes in 143 blocks
==1214==         suppressed: 0 bytes in 0 blocks
==1214== Reachable blocks (those to which a pointer was found) are not shown.
==1214== To see them, rerun with: --leak-check=full --show-reachable=yes
==1214== 
==1214== For counts of detected and suppressed errors, rerun with: -v
==1214== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
==1215== Memcheck, a memory error detector
==1215== Copyright (C) 2002-2012, and GNU GPL'd, by Julian Seward et al.
==1215== Using Valgrind-3.8.1 and LibVEX; rerun with -h for copyright info
==1215== Command: ./cminor -parse good20.cminor
==1215== 
exit: function void ( status: integer );
sum: function integer ( a: integer, b: integer ) =
{
    if((a>b)) {
        print "the first parameter should be <= the second parameter!\n";
        exit((-1));
    } 
    if((a==b)) {
        return a;
    } else {
        s: integer = 0;
        i: integer;
        for((i=a);(i<=b);(i++))
            (s=(s+i));
        return s;
    }
}
main: function integer () =
{
    print sum(1,5),'\n';
    print sum(5,5),'\n';
    print sum(1,10),'\n';
    print sum((-5),(-1)),'\n';
    return 0;
}
==1215== 
==1215== HEAP SUMMARY:
==1215==     in use at exit: 28,639 bytes in 135 blocks
==1215==   total heap usage: 153 allocs, 18 frees, 28,765 bytes allocated
==1215== 
==1215== LEAK SUMMARY:
==1215==    definitely lost: 0 bytes in 0 blocks
==1215==    indirectly lost: 0 bytes in 0 blocks
==1215==      possibly lost: 0 bytes in 0 blocks
==1215==    still reachable: 28,639 bytes in 135 blocks
==1215==         suppressed: 0 bytes in 0 blocks
==1215== Reachable blocks (those to which a pointer was found) are not shown.
==1215== To see them, rerun with: --leak-check=full --show-reachable=yes
==1215== 
==1215== For counts of detected and suppressed errors, rerun with: -v
==1215== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 6 from 6)
exit code:  0
