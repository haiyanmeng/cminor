Todo:

fix missing return;

for + - * /, guarantee only one reg is still used all the others are freed.
overall test, check for each operator and its operands.
think about each expr type;

function call without arguments test;

the big lession: if the parser rules is construsted as left-recursive, then the expr_codegen should first be called on the left child.
function, global variables from multiple function;

global and local

check the wasteful usages of registers.

double check the case where things can be empty, do not try to use those e->right->reg like func_call without params;

prune the usage of register. test print with multiple paramters; test bounce program dthain provides.

global variable, string, and immediate numbers does not need register, just need the label.

double check typecheck has the same results

http://www.felixcloutier.com/x86/
add <parsing is done>

double check dthain test cases.

check the validity of arithmetic:divide by 0. this check is only meaning for global expressions.
lvalue of function call, ++, --, = should be IDENT_NAME.

Done:
the left child of = can be: id; the right child of = can be: id, =
func_call; 
try dthain test cases.
print modify
test if-else for
test EXPR_IDENT_NAME and param and global variable 
modify expr_print, and retest parser and typecheck

expr_codegen: EXPR_ASSIGN, 
(a) = (b);
((a))++;
(a+1)++;
modify ^ op.
1=2; expr_is_constant
local variable - which field numbering
change the symbol structure to add the number of local variables and parameters of each function
